predicate arrayseg(a: Array<Int>, i: Int, j: Int) {
  0 <= i <= j <= a.length &*& 
  acc({ c: ArrayCell<Int> :: i <= c.index < j && c.array == a })
}

predicate array(a: Array<Int>) {
  acc(a) &*&
  arrayseg(a, 0, a.length)
}

function contentWitness(v: Int, FP: Set<ArrayCell<Int>>)
  returns (res: ArrayCell<Int>) 
  ensures forall c in FP :: c == contentWitness(c[], FP)
  ensures forall c: ArrayCell<Int> :: c !in FP ==> null == contentWitness(c[], FP)

function array_content(FP: Set<ArrayCell<Int>>)
  returns (C: Set<Int>)
  ensures forall c in FP :: c[] in C
  ensures forall v in C :: contentWitness(v, FP) in FP
  ensures forall v in C :: v == contentWitness(v, FP)[]
             @(matching v yields contentWitness(v, FP)[])
/*{
  { v: Int :: exists c in FP :: c[] == v }
}*/
  
predicate arrayseg_cnt(a: Array<Int>, i: Int, j: Int, C: Set<Int>) {
  exists X: Set<ArrayCell<Int>> ::
    arrayseg(a, i, j) && acc(X) &*&
    C == array_content(X)
}

predicate array_cnt(a: Array<Int>, C: Set<Int>) {
  acc(a) &*&
  arrayseg_cnt(a, 0, a.length, C)
}

predicate is_sorted_arrayseg(a: Array<Int>, i: Int, j: Int)
  requires arrayseg(a, i, j)
{
  forall i1: Int, j1: Int:: i <= i1 <= j1 < j ==> a[i1] <= a[j1]
}

predicate sorted_arrayseg(a: Array<Int>, i: Int, j: Int, C: Set<Int>) {
  arrayseg_cnt(a, i, j, C) &*&
  is_sorted_arrayseg(a, i, j)
}

predicate sorted_array(a: Array<Int>, C: Set<Int>) {
  acc(a) &*&
  sorted_arrayseg(a, 0, a.length, C)
}

// array with bounds

predicate is_bounded_arrayseg(a: Array<Int>, i: Int, j: Int, lb: Int, ub: Int)
  requires arrayseg(a, i, j)
{
  forall k: Int:: i <= k < j ==> lb <= a[k] && a[k] < ub
}

  
predicate arrayseg_bnd(a: Array<Int>, i: Int, j: Int, lb: Int, ub: Int) {
  arrayseg(a, i, j) &*&
  is_bounded_arrayseg(a, i, j, lb, ub)
}

predicate array_bnd(a: Array<Int>, lb: Int, ub: Int) {
  acc(a) &*&
  arrayseg_bnd(a, 0, a.length, lb, ub)
}

predicate sorted_arrayseg_bnd(a: Array<Int>, i: Int, j: Int, lb: Int, ub: Int) {
  arrayseg(a, i, j) &*&
  is_bounded_arrayseg(a, i, j, lb, ub) &&
  is_sorted_arrayseg(a, i, j)
}

predicate sorted_array_bnd(a: Array<Int>, lb: Int, ub: Int) {
  acc(a) &*&
  sorted_arrayseg_bnd(a, 0, a.length, lb, ub)
}

// matrix

/*
function matrixWitness(a: Array<Int>, FP2: Set<Array<Int>>) returns (idx: Int)

predicate matrix( a: Array<Array<Int>>,
                  FP0: Set<Array<Array<Int>>>,
                  FP1: Set<ArrayCell<Array<Int>>>,
                  FP2: Set<Array<Int>>,
                  FP3: Set<ArrayCell<Int>> ) {
  (forall i: Int:: i >= 0 && i < a.length ==> a[i].length == a[0].length) &&
  FP0 == Set<Array<Array<Int>>>(a) &&
  (forall c: ArrayCell<Array<Int>> ::
     c in FP1 == (0 <= c.index && c.index < a.length && c.array == a)) &&
  (forall c: ArrayCell<Int> ::
     c in FP3 == (0 <= c.index && c.index < c.array.length && c.array in FP2)) &&
  (forall i: Int:: i > 0 && i <= a.length ==> a[i] in FP2) &&
  (forall b: Array<Int>:: b in FP2 ==> a[matrixWitness(b, FP2)] == b) &&
  (forall b: Array<Int>:: b !in FP2 ==> matrixWitness(b, FP2) == 0) &&
  (forall i: Int, j: Int:: i > 0 && i <= a.length && j > 0 && j <= a.length && i != j ==> a[i] != a[j])
}
*/

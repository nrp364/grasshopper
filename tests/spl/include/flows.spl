/* -- Lemma library for flows. Independent of Flow domain. -- */


// Acyclic graphs, so single inflow and interface composition is a function

datatype Interface =
  int(inf: Map<Node, FlowDom>,
      na: NodeDom,
      fm: Map<Node, Map<Node, FlowDom>>,
      FP: Set<Node>,
      FPo: Set<Node>)
  | intUndef; // For when compositions don't exist

predicate Gr(I: Interface)

define N(x, I) { Gr(I) &*& I.FP == {x} }


function intComp(I1: Interface, I2: Interface) returns (I: Interface)
  ensures I.FP == I1.FP ++ I2.FP  // TODO only when I != intUndef
  ensures I.FPo == (I1.FPo -- I2.FP) ++ (I2.FPo -- I1.FP)

// Encoding of well defined interfaces
pure predicate intValid(I: Interface)

// Equivalent interfaces (node labels can be different) -- precondition of sync
predicate intEq(I1: Interface, I2: Interface) {
  I1.FP == I2.FP && I1.FPo == I2.FPo
  && (forall x: Node :: domEq(I1.inf[x], I2.inf[x]) == true
     @(matching x yields I1.inf[x]) @(matching x yields I2.inf[x]))
  && (forall x: Node, y: Node :: domEq(I1.fm[x][y], I2.fm[x][y]) == true)
}


// Associativity, commutativity of intComp
axiom forall I1: Interface, I2: Interface, I3: Interface ::
  intComp(I1, intComp(I2, I3)) == intComp(intComp(I1, I2), I3);
axiom forall I1: Interface, I2: Interface ::
  intComp(I1, I2) == intComp(I2, I1) @(matching intComp(I1, I2) yields intComp(I2, I1));

// Composition of undef with anything is undef
axiom forall I1: Interface, I2: Interface ::
  intComp(I1, I2) != intUndef ==> (I1 != intUndef && I2 != intUndef);

// Valid interfaces are not undefined
axiom forall I: Interface :: intValid(I) ==> I != intUndef;

axiom forall I1: Interface, I2: Interface ::
  intValid(I1) && intValid(I2) && intComp(I1, I2) != intUndef ==> intValid(intComp(I1, I2));

axiom forall I1: Interface, I2: Interface ::
  (! intValid(I1) || ! intValid(I2)) ==> intComp(I1, I2) == intUndef;

// Note: we assume that Gr(I) ==> intValid(I) in the following lemmas (TODO automate?)

// Sufficient condition for intComp(I, Ix, Iy), when no edge from y to x
lemma lemma_int_comp_fold(x: Node, Ix: Interface, y: Node, Iy: Interface, I: Interface)
  requires intValid(Ix) == true && intValid(Iy) == true && intValid(I) == true
  requires Ix.FP == {x} && Iy.FP == {y} && x != y && I.FP == {x, y}
  requires I.FPo == (Ix.FPo -- Iy.FP) ++ (Iy.FPo -- Ix.FP)
  requires domEq(Ix.inf[x], domPlus(I.inf[x], domMult(Iy.inf[y], Iy.fm[y][x]))) == true
  requires domEq(Iy.inf[y], domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y]))) == true
  requires x !in Iy.FPo  // In this case, easier to check new flow map:
  requires (forall n in I.FPo ::
            domEq(I.fm[x][n], domPlus(Ix.fm[x][n], domMult(Ix.fm[x][y], Iy.fm[y][n]))) == true)
  requires (forall n in I.FPo ::
            domEq(I.fm[y][n], domPlus(Iy.fm[y][n], domMult(Iy.fm[y][x], Ix.fm[x][n]))) == true)
  ensures intComp(Ix, Iy) == I

lemma lemma_int_comp_unfold(x: Node, Ix: Interface, y: Node, Iy: Interface, I: Interface)
  requires Ix != intUndef && Iy != intUndef && I != intUndef
  requires intComp(Ix, Iy) == I && x != y
  requires Ix.FP == {x} && Iy.FP == {y}
  ensures I.FP == {x, y}
  ensures I.FPo == (Ix.FPo -- Iy.FP) ++ (Iy.FPo -- Ix.FP)
  ensures domEq(Ix.inf[x], domPlus(I.inf[x], domMult(Iy.inf[y], Iy.fm[y][x]))) == true
  ensures domEq(Iy.inf[y], domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y]))) == true
  ensures exists Cxx: FlowDom, Cxy: FlowDom, Cyx: FlowDom, Cyy: FlowDom ::
    domEq(Cxx, domMult(Cxy, Iy.fm[y][x])) == true
    && domEq(Cyy, domMult(Cyx, Ix.fm[x][y])) == true
    && domEq(Cxy, domMult(Cxx, Ix.fm[x][y])) == true
    && domEq(Cyx, domMult(Cyy, Iy.fm[y][x])) == true
    && (forall n in I.FPo ::
       domEq(I.fm[x][n], domPlus(domMult(Cxx, Ix.fm[x][n]), domMult(Cxy, Iy.fm[y][n]))) == true
     && domEq(I.fm[y][n], domPlus(domMult(Cyy, Iy.fm[y][n]), domMult(Cyx, Ix.fm[x][n]))) == true
       @(matching n yields I.fm[x][n]) @(matching n yields I.fm[y][n])
       @(matching n yields Ix.fm[x][n]) @(matching n yields Iy.fm[y][n])
       @(matching Ix.fm[x][n], Iy.fm[y][n]
         yields domPlus(domMult(Cxx, Ix.fm[x][n]), domMult(Cxy, Iy.fm[y][n])))
       @(matching Ix.fm[x][n], Iy.fm[y][n]
         yields domPlus(domMult(Cyy, Iy.fm[y][n]), domMult(Cyx, Ix.fm[x][n])))
       )
 // TODO Ask Thomas why these aren't automatically generated
 // Also about conservative term gen for Read terms?

lemma lemma_int_valid_unfold(I: Interface)
  requires intValid(I) == true
  ensures forall n: Node, n1: Node ::
    (n !in I.FP ==> domEq(I.inf[n], domZero()) && domEq(I.fm[n][n1], domZero()))
    && (n1 !in I.FPo ==> domEq(I.fm[n][n1], domZero()))
  ensures forall n: Node :: n !in I.FP || n !in I.FPo

lemma lemma_int_valid_fold(I: Interface)
  requires I != intUndef // TODO why? See test_valid2
  requires forall n: Node, n1: Node ::
    (n !in I.FP ==> domEq(I.inf[n], domZero()) && domEq(I.fm[n][n1], domZero()))
    && (n1 !in I.FPo ==> domEq(I.fm[n][n1], domZero()))
  requires forall n: Node :: n !in I.FP || n !in I.FPo
  ensures intValid(I) == true


lemma lemma_Gr_comp(Ix: Interface, Iy: Interface)
  returns (I: Interface)
  requires Gr(Ix) &*& Gr(Iy)
  ensures Gr(I) &*& intComp(Ix, Iy) == I &*& I != intUndef

lemma lemma_Gr_comp_int(Ix: Interface, Iy: Interface)
  returns (I: Interface)
  requires Gr(Ix) &*& Gr(Iy)
  ensures Gr(Ix) &*& Gr(Iy) &*& intComp(Ix, Iy) == I &*& I != intUndef

lemma lemma_dirty_Gr_comp(Ix: Interface, Iy: Interface, I: Interface)
  returns (I1: Interface)
  requires [Gr(Ix) &*& Gr(Iy)](I)
  ensures [Gr(I1)](I) &*& intComp(Ix, Iy) == I1

lemma lemma_comp(Ix: Interface, Ix1: Interface, Iy: Interface, Iy1: Interface)
  returns (I: Interface)
  requires [Gr(Ix1)](Ix) &*& [Gr(Iy1)](Iy) &*& intValid(intComp(Ix1, Iy1)) == true
  ensures [Gr(Ix1) &*& Gr(Iy1)](I) &*& intComp(Ix, Iy) == I &*& I != intUndef

lemma lemma_comp_sing_int(x: Node, Ix: Interface, I2: Interface)
  returns (I: Interface)
  requires [acc(x)](Ix) &*& Gr(I2)
  ensures [acc(x)](Ix) &*& Gr(I2) &*& intComp(Ix, I2) == I &*& I != intUndef

lemma lemma_decomp(x: Node, I: Interface)
  returns (I1: Interface, I2: Interface)
  requires Gr(I) &*& x in I.FP
  ensures N(x, I1) &*& Gr(I2) &*& intComp(I1, I2) == I

lemma lemma_int_comp_inf_leq(x: Node, Ix: Interface, Iy: Interface,
                             I: Interface)
  requires Ix != intUndef && Iy != intUndef && I != intUndef
  requires intComp(Ix, Iy) == I && x in Ix.FP
  ensures domLeq(I.inf[x], Ix.inf[x]) == true


lemma lemma_step(I1: Interface, I2: Interface, I: Interface, x: Node, y: Node)
  requires intComp(I1, I2) == I && y in I1.FPo && I.FPo == {}
  ensures y in I2.FP && domLeq(domMult(I1.inf[x], I1.fm[x][y]), I2.inf[y]) == true


lemma lemma_conc(x: Node, I: Interface)
  requires I != intUndef
  requires N(x, I)
  ensures [gamma(x, I)](I)

lemma lemma_conc_rev(x: Node, I: Interface)
  requires I != intUndef
  requires [gamma(x, I)](I)
  ensures N(x, I)

procedure lemma_abs(x: Node, I: Interface, I1: Interface)
  requires I != intUndef && I1 != intUndef && intValid(I1)
  requires [gamma(x, I1)](I) &*& I1.FP == {x}
  ensures [N(x, I1)](I)


lemma lemma_add_in(I: Interface, n: Node, In: Interface, I1: Interface)
  requires I1 == intComp(I, In) && In.FP == {n} && domEq(In.inf[n], domZero()) == true
  ensures forall n1: Node :: domEq(I.inf[n1], I1.inf[n1]) == true
    @(matching n1 yields I.inf[n1]) @(matching n1 yields I1.inf[n1])

lemma lemma_add_singl(I: Interface, x: Node, Ix: Interface, I1: Interface)
  requires I1 == intComp(I, Ix) && Ix.FP == {x} && domEq(Ix.inf[x], domZero())
     && Ix.FPo == {}
  ensures I1.FPo == I.FPo
  ensures forall n: Node :: n in I.FP && domEq(I1.inf[n], I.inf[n])
                    || n !in I.FP && domEq(I1.inf[n], domZero())
    @(matching n yields I1.inf[n]) @(matching n yields I.inf[n])

lemma lemma_Gr_comp_uniq(I: Interface, I1: Interface, I2: Interface)
  requires Gr(I) && (Gr(I1) &*& Gr(I2))
  ensures Gr(I1) &*& Gr(I2) &*& I == intComp(I1, I2)

lemma lemma_Gr_uniq(I1: Interface, I2: Interface)
  requires Gr(I1) && (Gr(I2) &*& I2 == I2)  // Hack to force this to be spatial
  ensures Gr(I1) &*& I1 == I2

lemma lemma_disj(I1: Interface, I2: Interface,
                 x: Node, Ix: Interface, I3: Interface)
  returns (I4: Interface)
  requires (Gr(I1) &*& Gr(I2)) && (N(x, Ix) &*& Gr(I3)) &*& ndLeq(Ix.na, I1.na) == false
  ensures Gr(I1) &*& N(x, Ix) &*& Gr(I4)
    &*& I2 == intComp(Ix, I4) &*& I3 == intComp(I1, I4)

lemma lemma_repl(I: Interface, Ix: Interface, Iy: Interface, Ix1: Interface, I1: Interface)
  requires I == intComp(Ix, Iy) && I1 == intComp(Ix1, Iy) && intEq(Ix, Ix1) == true
  ensures intEq(I, I1) == true


procedure sync(I1: Interface, I2: Interface)
  returns ()
  requires [Gr(I2)](I1) &*& intValid(I2) == true &*& intEq(I1, I2) == true
  ensures Gr(I2)

procedure newNode()
  returns (x: Node, Ix: Interface)
  requires emp
  ensures [acc(x)](Ix)
  ensures intValid(Ix) && Ix.FP == {x} && domEq(Ix.inf[x], domZero()) && Ix.FPo == {}

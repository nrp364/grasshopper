predicate arrayseg(a: Array<Node>, i: Int, j: Int)
  requires acc(a)
{
  0 <= i && i <= j && j <= a.length &*&
  acc({ c: ArrayCell<Node> :: i <= c.index && c.index < j && c.array == a })
}

predicate array(a: Array<Node>) {
  acc(a) &*&
  arrayseg(a, 0, a.length)
}

function node_witness(x: Node, FP0: Set<ArrayCell<Node>>)
  returns (res: ArrayCell<Node>)
  requires acc(FP0)
  ensures forall c in FP0 :: c == node_witness(c[], FP0)

/*function array_state() returns (m: Map<ArrayCell<Node>, Node>)
ensures (forall c: ArrayCell<Node> :: c.m == c[] @(matching c yields c.m))*/

function arrayseg_content(a: Array<Node>, FP0: Set<ArrayCell<Node>>) returns (N: Set<Node>)
  requires acc(a) &*& acc(FP0)
  ensures forall c in FP0 :: c[] in N
  ensures forall x in N :: x == node_witness(x, FP0)[] @(matching x yields node_witness(x, FP0)[])
  ensures forall x in N :: node_witness(x, FP0) in FP0
  ensures forall x: Node :: x !in N ==> null == node_witness(x, FP0)


predicate arrayseg_with_content(a: Array<Node>, lo: Int, hi: Int, N: Set<Node>)
  requires acc(a)
{
  exists X: Set<ArrayCell<Node>> ::
    arrayseg(a, lo, hi) && acc(X) &*&
    N == arrayseg_content(a, X)
}

predicate array_with_content(a: Array<Node>, N: Set<Node>) {
  acc(a) &*&
  arrayseg_with_content(a, 0, a.length, N)
}


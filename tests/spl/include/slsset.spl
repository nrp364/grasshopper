// function and predicate declarations for a set implementation 
// based on sorted singly-linked lists

include "slslist.spl";

function data_witness(v: Int, FP: Set<Node>) returns (res: Node)
  requires acc(FP)
  ensures forall x in FP :: x == data_witness(x.data, FP)

function content(FP: Set<Node>)
  returns (C: Set<Int>)
  requires acc(FP)
  ensures forall x in FP :: x.data in C
  ensures forall v in C :: data_witness(v, FP) in FP
  ensures forall v: Int :: v !in C ==> data_witness(v, FP) == null
  ensures forall v in C :: v == data_witness(v, FP).data @(matching v yields data_witness(v, FP).data)

/*
function content(FP: Set<Node>)
  returns (C: Set<Int>)
  requires acc(FP)
{
  { v: Int :: exists x: Node :: x in FP && x.data == v }
}
*/

predicate list_set(x: Node, y: Node, C: Set<Int>) {
  exists X: Set<Node> ::
    lseg(x, y) && acc(X) &*&
    lseg_strictly_increasing(x, X) && C == content(X)
}

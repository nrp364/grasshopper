include "../include/treeset.spl";

procedure contains(root: Node, val: Int, implicit ghost content: Set<Int>)
  returns (res: Bool)
  requires tree_set(root, content)
  ensures tree_set(root, content)
  ensures res == val in content
{
  var curr: Node;
  curr := root;
  
  while (curr != null && curr.data != val) 
    invariant (exists content1: Set<Int> :: 
               (tree_set(curr, content1) -** tree_set(root, content)) &*&
               (val in content == val in content1))
  {
    if (curr.data > val) {
      curr := curr.left;
    } else if (curr.data < val) {
      curr := curr.right;
    }
  }
  
  if (curr != null) res := true;
  else res := false;
  return res;
}

procedure singleton(val: Int)
  returns (root: Node)
  requires emp
  ensures tree_set(root, {val}) &*& root.parent == null
{
  root := new Node;
  root.left := null;
  root.right := null;
  root.parent := null;
  root.data := val;
}

procedure test()
  requires emp
  ensures emp
{
  var t := singleton(1);
  if (contains(t, 0)) {
    pure assert false;
  }
  var x := t.right;
  free t;
}

procedure insert(root: Node, val: Int, implicit ghost Content: Set<Int>)
  returns (nroot: Node)
  requires tree_set(root, Content)
  ensures tree_set(nroot, Content ++ {val})
{
  if (root == null) {
    nroot := singleton(val);
    return nroot;
  }
  
  var curr: Node;
  curr := root;
  
  while (curr.data > val && curr.left != null ||
         curr.data < val && curr.right != null) 
    invariant exists Content1: Set<Int> :: 
      (acc(curr) -** tree_set(curr, Content1) -** tree_set(root, Content))
    invariant forall x: Node :: Btwn(parent, curr, x.left, x) &&
      Btwn(parent, x, root, root) ==> x.data > val 
    invariant forall x: Node :: Btwn(parent, curr, x.right, x) &&
      Btwn(parent, x, root, root) ==> x.data < val
  {
    if (curr.data > val && curr.left != null) {
      curr := curr.left;
    } else if (curr.data < val && curr.right != null) {
      curr := curr.right;
    }
  }
  
  if (curr.data != val) {
    var n: Node;
    n := singleton(val);
    n.parent := curr;
    if (curr.data > val) {
      curr.left := n;
    } else {
      curr.right := n;
    }
  }
  return root;
}


// sorted list
struct LNode {
  var next: LNode;
  var ldata: Int;
}

function lseg_footprint(x: LNode, y: LNode) returns (FP: Set<LNode>) {
  forall z: LNode :: z in FP == (Btwn(next, x, z, y) && z != y)
}

function ldata_witness(v: Int, d: Map<LNode, Int>, FP: Set<LNode>) returns (res: LNode) 

function lcontent(FP: Set<LNode>) returns (C: Set<Int>) {
  (forall x in FP :: x == ldata_witness(x.ldata, ldata, FP)) &&
  (forall x in FP :: x.ldata in C) &&
  (forall v in C :: ldata_witness(v, ldata, FP) in FP) &&
  (forall v: Int :: v !in C ==> ldata_witness(v, ldata, FP) == null) &&
  (forall v in C :: v == ldata_witness(v, ldata, FP).ldata @(matching v yields ldata_witness(v, ldata, FP).ldata))
}

predicate list_set(x: LNode, y: LNode, C: Set<Int>)(FP: Set<LNode>) {
  Btwn(next, x, y, y) &&
  FP == lseg_footprint(x, y) &&
  (forall m in FP, n in FP :: Btwn(next,x,m,n) ==> m.ldata <= n.ldata) &&
  C == lcontent(FP)
}

//binary search tree
struct TNode {
  var left: TNode;
  var right: TNode;
  ghost var parent: TNode;
  var tdata: Int;
}

function tree_footprint(r: TNode) returns (FP: Set<TNode>) {
  forall x: TNode :: x in FP == (Btwn(parent, x, r, r) && r != null)
}

function tree_parent(r: TNode) returns (p: TNode) {
  r != null && r.parent == p || r == null && p == null
}

predicate parent_equal_left_child(FP: Set<TNode>) {
  (forall x: TNode :: x !in FP || x.left == null || Btwn(parent, x.left, x, x) && x.left != x) &&
  (forall x: TNode, y: TNode :: x in FP && Btwn(parent, x.left, y, x) ==> x == y || x.left == y)
}

predicate parent_equal_right_child(FP: Set<TNode>) {
  (forall x: TNode :: x !in FP || x.right == null || Btwn(parent, x.right, x, x) && x.right != x) &&
  (forall x: TNode, y: TNode :: x in FP && Btwn(parent, x.right, y, x) ==> x == y || x.right == y)
}

predicate left_right_distinct(FP: Set<TNode>) {
  (forall x: TNode :: x in FP && x.left == x.right ==> x.left == null 
    @(matching x.right yields x.left)
    @(matching x.left yields x.right))
}

predicate reach_via_left_right(FP: Set<TNode>) {
  forall x in FP, y in FP ::
    Btwn(parent, y, x, x) ==>
      x == y || Btwn(parent, y, x.left, x) || Btwn(parent, y, x.right, x)
}

function tdata_witness(v: Int, d: Map<TNode, Int>, FP: Set<TNode>) returns (res: TNode)

function tcontent(FP: Set<TNode>) returns (C: Set<Int>) {
  (forall x: TNode :: x in FP ==> x == tdata_witness(x.tdata, tdata, FP)) &&
  (forall x: TNode :: x in FP ==> x.tdata in C) &&
  (forall v in C :: tdata_witness(v, tdata, FP) in FP) &&
  (forall v: Int :: v !in C ==> tdata_witness(v, tdata, FP) == null) &&
  (forall v in C :: v == tdata_witness(v, tdata, FP).tdata @(matching v yields tdata_witness(v, tdata, FP).tdata))
}

predicate tree_set(r: TNode, C: Set<Int>)(FP: Set<TNode>) {
  tree_footprint(r) == FP &&
  parent_equal_left_child(FP) &&
  parent_equal_right_child(FP) &&
  left_right_distinct(FP) &&
  reach_via_left_right(FP) &&
  (forall x in FP, y in FP :: Btwn(parent, x, y.left, y) ==> x.tdata < y.tdata @(matching y.left yields y.tdata)) &&
  (forall x in FP, y in FP :: Btwn(parent, x, y.right, y) ==> x.tdata > y.tdata @(matching y.right yields y.tdata)) &&
  C == tcontent(FP)
}

//////////

procedure union(lst1: LNode, lst2: LNode,
                implicit ghost content1: Set<Int>,
                implicit ghost content2: Set<Int>)
  returns (res: LNode)
  requires list_set(lst1, null, content1);
  requires list_set(lst2, null, content2);
  ensures  list_set(res, null, content1 ++ content2);
{
    if (lst1 == null) {
        return lst2;
    } else if (lst2 == null) {
        return lst1;
    } else if (lst1.ldata < lst2.ldata) {
        lst1.next := union(lst1.next, lst2);
        return lst1;
    } else if (lst1.ldata > lst2.ldata) {
        lst2.next := union(lst1, lst2.next);
        return lst2;
    } else { //lst1.data == lst2.data
        var n: LNode;
        n := lst1.next;
        free(lst1);
        return union(n, lst2);
    }
}

procedure insertL(lst: LNode, val: Int,
                  implicit ghost content: Set<Int>)
  returns (res: LNode)
  requires list_set(lst, null, content);
  ensures  list_set(res, null, content ++ Set(val));
{
  var curr: LNode, prev: LNode;
  curr := lst;
  prev := null;
  ghost var c1 := content;
  ghost var c2 := Set<Int>();

  while (curr != null && curr.ldata < val)
    invariant prev == null && curr == lst && c2 == Set<Int>() || 
                (val > prev.ldata && 
                prev != curr && 
                prev.next == curr && 
                Btwn(next,lst,prev,curr)) &*&
                list_set(lst, curr, c2);
    invariant list_set(curr, null, c1);
    invariant content == c1 ++ c2;
    invariant prev == null || curr == null || prev.ldata < curr.ldata;
  {
    c1 := c1 -- Set(curr.ldata);
    c2 := c2 ++ Set(curr.ldata);
    prev := curr;
    curr := curr.next; 
  }

  var n: LNode;

  if (curr != null && curr.ldata == val) {
    return lst;
  }

  n := new LNode;
  n.next := curr;
  n.ldata := val;

  if (prev != null) {
    prev.next := n;
    return lst;
  } else {
    return n;
  }

}

procedure toList(t: TNode, implicit ghost content: Set<Int>)
returns (res: LNode)
  requires tree_set(t, content);
  ensures list_set(res, null, content);
{
    if (t == null) {
        return null;
    } else {
        t.parent := null;
        var r := t.right;
        var l := t.left;
        var d := t.tdata;
        if (r != null) { r.parent := null; }
        if (l != null) { l.parent := null; }
        free(t);
        var u := union(toList(l), toList(r));
        return insertL(u, d);
    }
}

//TODO needs bound!!
procedure toListRec(t: TNode, l: LNode, ghost bnd: Int,
                    implicit ghost contentT: Set<Int>,
                    implicit ghost contentL: Set<Int>)
returns (res: LNode)
  requires tree_set(t, contentT);
  requires list_set(l, null, contentL);
  requires forall v in contentT :: v >= bnd
  requires forall v in contentL :: v < bnd
  ensures  list_set(res, null, contentT ++ contentL);
{
    if (t == null) {
        return l;
    } else {
        var n := new LNode;
        n.ldata := t.tdata;
        n.next := toListRec(t.left, l, bnd);
        res := toListRec(t.right, n, -1); //XXX
        t.parent := null;
        free(t);
    }
}


procedure insert(root: TNode, value: Int, implicit ghost content: Set<Int>)
returns (new_root: TNode)
  requires tree_set(root, content);
  ensures tree_set(new_root, content ++ Set(value));
{
  if (root == null) {
    var t := new TNode;
    t.left := null;
    t.right := null;
    t.tdata := value;
    t.parent := null;
    return t;
  } else { 
    var n: TNode;
    if (root.tdata > value) {
      n := insert(root.left, value);
      root.left := n;
      if (n != null) {n.parent := root;}
      return root;
    } else if (root.tdata < value) {
      n := insert(root.right, value);
      root.right := n;
      if (n != null) {n.parent := root;}
      return root;
    }
    return root;
  }
}

procedure toTree(l: LNode, implicit ghost content: Set<Int>)
returns (res: TNode)
  requires list_set(l, null, content);
  ensures  tree_set(res, content);
{
  if (l == null) {
    res := null;
  } else {
    res := insert(toTree(l.next), l.ldata);
    free(l);
  }
}


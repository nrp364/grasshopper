struct Node {
  var next: Node;
  var ghost gnext: Node;
}

function rep(x: Node) returns (res: Node)
  requires acc({y: Node :: Reach(next, x, y) && y != null})
  ensures
     Reach(next, x, null) && x != null ==>
       Reach(next, x, res) && res != null &&
       res.next == null
  ensures
    !Reach(next, x, null) || x == null ==> res == null
    @(matching x yields rep(rep(x)))
  
predicate next_eq_gnext(X: Set<Node>)
  requires acc(X)
{
  forall x: Node, y: Node, z: Node ::
    x in X && z in X ==>
      Btwn(next, x, y, z) == Btwn(gnext, x, y, z)
}

predicate eqclass(x: Node, X: Set<Node>) {
  acc(X) &*&
    X == { z: Node :: Reach(gnext, z, rep(x)) } &&
    rep(x).gnext == null &&
    x in X &&
    next_eq_gnext(X)
}

procedure lemma_rep_is_idempotent(x: Node)
  requires acc({y: Node :: Reach(next, x, y) && y != null})
  ensures acc({y: Node :: Reach(next, x, y) && y != null})
  ensures rep(x) == rep(rep(x))
{
}

procedure lemma_rep_non_null(x: Node, X: Set<Node>)
  requires eqclass(x, X)
  ensures eqclass(x, X)
  ensures rep(x) != null
{
}

procedure lemma_rep_has_same_eqclass(x: Node, X: Set<Node>, Y: Set<Node>)
  requires eqclass(x, X)
  ensures eqclass(rep(x), X)
{
}

  
procedure find(x: Node, implicit ghost X: Set<Node>) 
  returns (res: Node)
  requires eqclass(x, X)
  ensures eqclass(x, X)
  ensures res == rep(x) && rep(x) == old(rep(x))
{
  var n: Node;
  n := x.next;
  if (n != null) {
    res := find(n);
    x.next := res;
    x.gnext := res;
    return res;
  } else {
    return x;
  }
}

procedure union(x: Node, y: Node,
                implicit ghost X: Set<Node>,
                implicit ghost Y: Set<Node>)
  requires eqclass(x, X) &+& eqclass(y, Y)
  ensures eqclass(y, X ++ Y)
{
  var t: Node, s: Node;
  t := find(x);
  s := find(y);
  if (t != s) {
    t.next := s;
    t.gnext := s;
  }
}

procedure create() returns (res: Node)
  ensures eqclass(res, {res})
{
  res := new Node;
  res.next := null;
}

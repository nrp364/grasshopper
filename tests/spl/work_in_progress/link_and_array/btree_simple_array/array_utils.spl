include "def_local.spl";

procedure key_arraymove(a: Array<T>, srcPos: Int, dstPos: Int, length: Int)
  requires acc(a)
  requires 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
  requires length >= 0
  ensures  acc(a)
  ensures forall i: Int :: 0 <= i && i < a.length && (i < dstPos || dstPos + length <= i) ==> a[i] == old(a[i])
  ensures forall b: Array<T>, i: Int :: 0 <= i && i < length ==> a[dstPos + i] == old(a[srcPos + i])
  //@(matching b[i] yields b[srcPos + (i - dstPos)])
                     @(matching b[i] yields a[srcPos + (i - dstPos)])
  //@(matching b[i] yields b[dstPos + (i - dstPos)])
                     @(matching b[i] yields a[dstPos + (i - dstPos)])
{
  if (srcPos < dstPos) {
    var i := length - 1;
    while (i >= 0)
      invariant srcPos < dstPos && 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
      invariant acc(a)
      invariant -1 <= i && i < length
      invariant forall j: Int :: 0 <= j && j < a.length && (j <= dstPos + i || dstPos + length <= j) ==> a[j] == old(a[j])
      invariant forall j: Int :: i < j && j < length ==> a[dstPos + j] == old(a[srcPos + j])
        @(matching a[dstPos + j] yields old(a[srcPos + j]))
    {
      a[dstPos + i] := a[srcPos + i];
      i := i - 1;
    }
  } else if (srcPos > dstPos) {
    var i := 0;
    while (i < length)
      invariant srcPos > dstPos && 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
      invariant acc(a)
      invariant 0 <= i && i <= length 
      invariant forall j: Int :: 0 <= j && j < a.length && (j < dstPos || dstPos + i <= j) ==> a[j] == old(a[j])
      invariant forall j: Int :: 0 <= j && j < i ==> a[dstPos + j] == old(a[srcPos + j])
        @(matching a[dstPos + j] yields old(a[srcPos + j]))
    {
      a[dstPos + i] := a[srcPos + i];
      i := i + 1;
    }
  }
}

procedure node_arraymove(a: Array<Node>, srcPos: Int, dstPos: Int, length: Int)
  requires acc(a)
  requires 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
  requires length >= 0
  ensures  acc(a)
  ensures forall i: Int :: 0 <= i && i < a.length && (i < dstPos || dstPos + length <= i) ==> a[i] == old(a[i])
  ensures forall b: Array<Node>, i: Int :: 0 <= i && i < length ==> a[dstPos + i] == old(a[srcPos + i])
  //@(matching b[i] yields b[srcPos + (i - dstPos)])
  @(matching b[i] yields old(a[srcPos + (i - dstPos)].lbound))
  @(matching b[i] yields old(a[srcPos + (i - dstPos)].ubound))
 //@(matching b[i] yields b[dstPos + (i - dstPos)])
  @(matching b[i] yields old(a[dstPos + (i - dstPos)].lbound))
  @(matching b[i] yields old(a[dstPos + (i - dstPos)].ubound))
{
  if (srcPos < dstPos) {
    var i := length - 1;
    while (i >= 0)
      invariant srcPos < dstPos && 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
      invariant acc(a)
      invariant -1 <= i && i < length
      invariant forall j: Int :: 0 <= j && j < a.length && (j <= dstPos + i || dstPos + length <= j) ==> a[j] == old(a[j])
      invariant forall j: Int :: i < j && j < length ==> a[dstPos + j] == old(a[srcPos + j])
        @(matching a[dstPos + j] yields old(a[srcPos + j]))
    {
      a[dstPos + i] := a[srcPos + i];
      i := i - 1;
    }
  } else if (srcPos > dstPos){
    var i := 0;
    while (i < length)
      invariant srcPos > dstPos && 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= a.length
      invariant acc(a)
      invariant 0 <= i && i <= length 
      invariant forall j: Int :: 0 <= j && j < a.length && (j < dstPos || dstPos + i <= j) ==> a[j] == old(a[j])
      invariant forall j: Int :: 0 <= j && j < i ==> a[dstPos + j] == old(a[srcPos + j])
        @(matching a[dstPos + j] yields old(a[srcPos + j]))
    {
      a[dstPos + i] := a[srcPos + i];
      i := i + 1;
    }
  }
}

procedure key_arraycopy(a: Array<T>, srcPos: Int, b: Array<T>, dstPos: Int, length: Int)
  requires acc(a) &*& acc(b)
  requires length >= 0
  requires 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= b.length
  ensures  acc(a) &*& acc(b)
  ensures  forall i: Int :: 0 <= i < a.length ==> a[i] == old(a[i])
  ensures  forall i: Int :: 0 <= i < dstPos ==> b[i] == old(b[i])
  ensures  forall i: Int :: dstPos + length <= i < b.length ==> b[i] == old(b[i])
  ensures  forall i: Int, c: Array<T> :: 0 <= i < length ==> b[dstPos + i] == a[srcPos + i]
                      @(matching c[i] yields a[srcPos + (i - dstPos)])
                      @(matching c[i] yields a[dstPos + (i - dstPos)])
                      @(matching c[i] yields b[srcPos + (i - dstPos)])
                      @(matching c[i] yields b[dstPos + (i - dstPos)])
{
  var i := 0;
  while (i < length)
    invariant acc(a) &*& acc(b)
    invariant 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= b.length
    invariant length >= 0
    invariant 0 <= i && i <= length
    invariant forall j: Int :: 0 <= j < a.length ==> a[j] == old(a[j])
    invariant forall j: Int :: 0 <= j < dstPos ==> b[j] == old(b[j])
    invariant forall j: Int :: dstPos + length <= j < b.length ==> b[j] == old(b[j])
    invariant forall j: Int :: 0 <= j < i ==> b[dstPos + j] == a[srcPos + j]
  {
    b[dstPos + i] := a[srcPos + i];
    i := i + 1;
  }
}

procedure node_arraycopy(a: Array<Node>, srcPos: Int, b: Array<Node>, dstPos: Int, length: Int)
  requires acc(a) &*& acc(b)
  requires 0 <= srcPos && srcPos + length <= a.length && 0 <= dstPos && dstPos + length <= b.length
  requires length >= 0
  ensures  acc(a) &*& acc(b)
  ensures  forall i: Int :: 0 <= i && i < a.length ==> a[i] == old(a[i])
  ensures  forall i: Int :: 0 <= i && i < dstPos ==> b[i] == old(b[i])
  ensures  forall i: Int :: dstPos + length <= i && i < b.length ==> b[i] == old(b[i])
  ensures  forall i: Int, c: Array<Node> :: 0 <= i && i < length ==> b[dstPos + i] == a[srcPos + i]
                        @(matching c[i] yields old(a[srcPos + (i - dstPos)].lbound))
                        @(matching c[i] yields old(a[srcPos + (i - dstPos)].ubound))
                        @(matching c[i] yields old(a[dstPos + (i - dstPos)].lbound))
                        @(matching c[i] yields old(a[dstPos + (i - dstPos)].ubound))
                        @(matching c[i] yields old(b[srcPos + (i - dstPos)].lbound))
                        @(matching c[i] yields old(b[srcPos + (i - dstPos)].ubound))
                        @(matching c[i] yields old(b[dstPos + (i - dstPos)].lbound))
                        @(matching c[i] yields old(b[dstPos + (i - dstPos)].ubound))
{
  var i := 0;
  while (i < length)
    invariant acc(a) &*& acc(b)
    invariant 0 <= srcPos <= srcPos + length <= a.length && 0 <= dstPos <= dstPos + length <= b.length
    invariant 0 <= i <= length
    invariant forall j: Int :: 0 <= j < a.length ==> a[j] == old(a[j])
    invariant forall j: Int :: 0 <= j < dstPos ==> b[j] == old(b[j])
    invariant forall j: Int :: dstPos + length <= j < b.length ==> b[j] == old(b[j])
    invariant forall j: Int :: 0 <= j < i ==> b[dstPos + j] == a[srcPos + j]
  {
    b[dstPos + i] := a[srcPos + i];
    i := i + 1;
  }
}

procedure key_fill(a: Array<T>, from: Int, to: Int, value: T)
  requires acc(a)
  requires 0 <= from <= to <= a.length
  ensures  acc(a)
  ensures  forall i: Int :: from <= i < to ==> a[i] == value
  ensures  forall i: Int :: 0 <= i < from ==> a[i] == old(a[i])
  ensures  forall i: Int :: to <= i < a.length ==> a[i] == old(a[i])
{
  var i := from;
  while(i < to)
    invariant acc(a)
    invariant 0 <= from <= i <= to <= a.length
    invariant forall j: Int :: from <= j < i ==> a[j] == value
    invariant forall j: Int :: 0 <= j < from ==> a[j] == old(a[j])
    invariant forall j: Int :: to <= j < a.length ==> a[j] == old(a[j])
  {
    a[i] := value;
    i := i + 1;
  }
}

procedure node_fill(a: Array<Node>, from: Int, to: Int, value: Node)
  requires acc(a)
  requires 0 <= from <= to <= a.length
  ensures  acc(a)
  ensures  forall i: Int :: from <= i < to ==> a[i] == value
  ensures  forall i: Int :: 0 <= i < from ==> a[i] == old(a[i])
  ensures  forall i: Int :: to <= i < a.length ==> a[i] == old(a[i])
{
  var i := from;
  while(i < to)
    invariant acc(a)
    invariant 0 <= from <= i <= to <= a.length
    invariant forall j: Int :: from <= j < i ==> a[j] == value
    invariant forall j: Int :: 0 <= j < from ==> a[j] == old(a[j])
    invariant forall j: Int :: to <= j < a.length ==> a[j] == old(a[j])
  {
    a[i] := value;
    i := i + 1;
  }
}

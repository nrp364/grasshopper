include "../include/flows.spl";

function domPlus(p1: Int, p2: Int) returns (p: Int) { p1 + p2 }

function domMult(p1: Int, p2: Int) returns (p: Int) { p1 * p2 }

function domZero() returns(p: Int) { 0 }
  
struct Node {
  var next: Node;
}

datatype Interface =
  int(inf: Map<Node, Int>,
      fm: Map<Node, Map<Node, Int>>,
      FP: Set<Node>,
      FPo: Set<Node>)
  | intUndef; // All interfaces with > 1 inflow are undefined


// Expect this to fail
procedure test_valid2(I: Interface, x: Node)
  requires I == intUndef && I.FP == {x} && I.FPo == {} && (forall n: Node, o: Node :: I.inf[n] == 0 && I.fm[n][o] == 0)
  ensures intValid(I) == true
{
  lemma_int_valid_fold(I);
}

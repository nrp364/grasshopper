/** B+ tree implementation of the give-up template for linearizable dictionaries. */

options "-simplearrays -symbexec"

include "give-up-header.spl";
include "array_util.spl";


/** Instantiating give-up-header */

datatype FlowDom = fd(ks: Map<Int, Int>, pc: Int);

pure predicate domEq(p1: FlowDom, p2: FlowDom) {
  p1.pc == p2.pc && (forall k: Int :: p1.ks[k] == p2.ks[k]
    @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
}

pure predicate domLeq(p1: FlowDom, p2: FlowDom) {
  p1.pc <= p2.pc && (forall k: Int :: p1.ks[k] <= p2.ks[k]
    @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
}

pure function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures p.pc == p1.pc + p2.pc
    @(matching p.pc yields p1.pc + p2.pc)
  ensures forall k: Int :: p.ks[k] == p1.ks[k] + p2.ks[k]
    @(matching p.ks[k] yields p1.ks[k] + p2.ks[k])

pure function domMult(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures p.pc == p1.pc * p2.pc
    @(matching p.pc yields p1.pc * p2.pc)
  ensures forall k: Int :: p.ks[k] == p1.ks[k] * p2.ks[k]
    @(matching p.ks[k] yields p1.ks[k] * p2.ks[k])

pure function domZero() returns(p: FlowDom)
  ensures p.pc == 0
  ensures forall k: Int :: p.ks[k] == 0

struct Node {
  var locktid: Int;
  var len: Int;
  var rangeLb: Int;
  var rangeUb: Int;
  var keys: Array<Int>;
  var ptrs: Array<Node>;
}

define unchanged(x) {
  x.locktid == old(x.locktid) && x.len == old(x.len) && x.rangeLb == old(x.rangeLb)
    && x.rangeUb == old(x.rangeUb) && x.keys == old(x.keys) && x.ptrs == old(x.ptrs)
    && x.keys.length == old(x.keys.length) && x.keys.map == old(x.keys.map)
    && x.ptrs.length == old(x.ptrs.length) && x.ptrs.map == old(x.ptrs.map)
}


/** Definition of good condition, gamma */

var B: Int;
axiom B > 1;

define gammaSpatial(x) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs)  
}

define gammaB(x, I) {
  x.locktid >= 0
    && (x.locktid > 0) == (I.na.lockinfo == locked(x.locktid) || I.na.lockinfo == dirtylock(x.locktid))
    && (x.locktid == 0) == (I.na.lockinfo == unlocked)
    && (forall n: Node, n1: Node, k: Int :: I.fm[n][n1].ks[k] <= I.fm[n][n1].pc)  // edgeset != {} ==> pc >= 1
    && (forall k: Int :: I.inf[x].ks[k] >= 1 ==> I.inf[x].pc == 1)  // inset != {} ==> pc == 1
}

define gammaG(x, I) {
  0 <= x.len && x.len < 2*B && x.keys.length == 2*B && x.ptrs.length == 2*B && x.locktid >= 0
    && ((x.locktid == 0) == (I.na.lockinfo == unlocked))
    && (x.locktid > 0) == (I.na.lockinfo == locked(x.locktid) || I.na.lockinfo == dirtylock(x.locktid))
    && (forall n: Node, n1: Node, k: Int :: I.fm[n][n1].ks[k] <= I.fm[n][n1].pc)  // edgeset != {} ==> pc >= 1
    && (forall k: Int :: I.inf[x].ks[k] >= 1 ==> I.inf[x].pc == 1)  // inset != {} ==> pc == 1
    && (x.len != 0 ==> x.rangeLb <= x.keys[0] && x.keys[x.len-1] < x.rangeUb)
    && (forall k: Int :: (I.inf[x].ks[k] == 1) == (x.rangeLb <= k < x.rangeUb))
    && (forall i: Int, j: Int :: 0 <= i < j < x.len ==> x.keys[i] < x.keys[j])
    && (x.ptrs[0] == null && I.FPo == {}  // Leaf
    //       && (forall i: Int :: 0 <= i <= x.len ==> x.ptrs[i] == null)
       && I.na.contents == set_of_map(x.keys.map, 0, x.len)
     || x.ptrs[0] != null  // Internal
       && I.na.contents == {}
       && (forall i: Int :: 0 <= i <= x.len ==> x != x.ptrs[i])
       && (forall i: Int, j: Int :: 0 <= i < j <= x.len ==> x.ptrs[i] != x.ptrs[j])
       && (forall i: Int, k: Int :: 0 <= i <= x.len ==>
          x.ptrs[i] != null && x.ptrs[i] in I.FPo
          && ((I.fm[x][x.ptrs[i]].ks[k] == 1) ==
             ((i <= 0 || x.keys[i-1] <= k) && (i >= x.len || k < x.keys[i])))
          @(matching x.ptrs[i] yields x.keys[i-1])
          @(matching x.ptrs[i] yields x.keys[i])))
}
/* TODO have a create B+ tree function to check this isn't unsat */


procedure newNode(xtid: Int, xlen: Int, xrangeLb: Int, xrangeUb: Int)
  returns (x: Node, Ix: Interface)
  requires emp
  ensures [acc(x) &*& acc(x.ptrs) &*& acc(x.keys)](Ix)
  ensures x.locktid == xtid && x.len == xlen && x.rangeLb == xrangeLb
  ensures x.rangeUb == xrangeUb && x.keys.length == 2*B && x.ptrs.length == 2*B
  ensures intValid(Ix) == true
  ensures Ix.FP == {x} && domEq(Ix.inf[x], domZero()) == true && Ix.FPo == {}


pure function fm_of_node(x: Node, kys: Map<Int, Int>, ps: Map<Int, Node>, lenn: Int, i: Int)
  returns (f: Map<Node, Map<Node, FlowDom>>)
  // TODO need two of each otherwise not instantiated
  ensures forall n: Node, n1: Node, k: Int ::
    ps[0] == null ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] == null ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: Int ::
    ps[0] != null && i < 0 ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i < 0 ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: Int ::
    ps[0] != null && i >= 0 && n != x ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n != x ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: Int ::
    ps[0] != null && i >= 0 && n in {x} && n1 != ps[i]
    // TODO why not known?    (domEq(f[n][n1], fm_of_node(x, kys, ps, lenn, i-1)[n][n1]) == true)
    ==> f[n][n1].ks[k] == fm_of_node(x, kys, ps, lenn, i-1)[n][n1].ks[k]
    @(matching f[n][n1].ks[k] yields fm_of_node(x, kys, ps, lenn, i-1)[n][n1].ks[k])
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n in {x} && n1 != ps[i]
    ==> f[n][n1].pc == fm_of_node(x, kys, ps, lenn, i-1)[n][n1].pc
    @(matching f[n][n1].pc yields fm_of_node(x, kys, ps, lenn, i-1)[n][n1].pc)
  ensures forall n: Node, n1: Node, k: Int ::
    ps[0] != null && i >= 0 && n in {x} && n1 in {ps[i]}
    // TODO  (f[n][n1].ks[k] == ((i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i])) ? 1 : 0)
    ==>
    (f[n][n1].ks[k] == 1 && (i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i])
      || f[n][n1].ks[k] == 0 && !((i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i])))
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n in {x} && n1 in {ps[i]}
    ==> f[n][n1].pc == 1

/* TODO issue #29
{
  i <= 0 ?
    { n: Node :: { n1: Node :: domZero() } }
    : { n: Node :: n != x ? { n1: Node :: domZero() } :
        { n1: Node :: n1 == ps[i] ?
          fd({ k: Int :: (i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i]) ? 1 : 0 })
          : fm_of_node(x, kys, ps, lenn, i-1)[n][n1] } }
} */

pure function fpo_of_node(x: Node, kys: Map<Int, Int>, ps: Map<Int, Node>, lenn: Int, i: Int)
  returns (X: Set<Node>)
  requires forall i: Int :: 0 <= i <= lenn ==> x != ps[i]
  ensures x !in X
{
  i < 0 || ps[0] == null ? {} : fpo_of_node(x, kys, ps, lenn, i-1) ++ {ps[i]}
}

pure function inf_of_node(x: Node, l: Int, u: Int)
  returns (d: Map<Node, FlowDom>)
  ensures forall n: Node, k: Int :: n in {x} ==> (d[n].ks[k] == 1 && l <= k < u)
    || (d[n].ks[k] == 0 && !(l <= k < u))
  ensures forall n: Node, k: Int :: n !in {x} ==> d[n].ks[k] == 0
  ensures forall n: Node, k: Int :: n in {x} ==> (d[n].pc == 1 && l < u) || (d[n].pc == 0 && !(l < u))
  ensures forall n: Node, k: Int :: n !in {x} ==> d[n].pc == 0


lemma lemma_int_of_node(x: Node, i: Int)
/* TODO why isn't domLeq defn getting instantiated?
  ensures forall n: Node, n1: Node :: domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1])
  @(matching domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1]) yields
  known(domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1])))
 */
  requires gammaSpatial(x)
  requires 0 <= x.len
  requires forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x != x.ptrs[i]
  requires forall i: Int, j: Int :: 0 <= i < j < x.len ==> x.keys[i] < x.keys[j]
  requires forall i: Int, j: Int :: x.ptrs[0] != null && 0 <= i < j <= x.len ==> x.ptrs[i] != x.ptrs[j]
  ensures gammaSpatial(x) &*& unchanged(x)
  // TODO after fixing issue #24, use domEq, domLeq etc below
  // All fm values are >= 0
  ensures forall n: Node, n1: Node, k: Int ::
    domZero().ks[k] <= fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k]
    && 0 <= fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc
    // TODO write 0 instead of domZero().ks[k] and remove these term gens?
    @(matching domZero().ks[k] yields fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k])
    @(matching fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] yields domZero().ks[k])
  // fm from nodes != x are 0
  ensures forall n: Node, n1: Node, k: Int :: n !in {x}
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
      && fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 0
  // fm to nodes !in FPo are 0
  ensures forall n: Node, n1: Node, k: Int :: n1 !in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
      && fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 0
  ensures x !in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
  // helper invariant for next property
  ensures forall n: Node, n1: Node, k: Int :: n in {x} && i < x.len && x.keys[i] <= k
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
  // fm to different nodes are disjoint
  ensures forall n: Node, n1: Node, n2: Node, k: Int :: n !in {x} || n1 == n2 || i > x.len
    || fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
    || fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n2].ks[k] == 0
  // fm satisfies gammaG
  ensures forall n: Node, n1: Node, j: Int, k: Int ::
    x.ptrs[0] != null && n in {x} && n1 in {x.ptrs[j]} && 0 <= j <= i <= x.len ==>
          n1 in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
          && ((fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 1) ==
              ((j <= 0 || x.keys[j-1] <= k) && (j >= x.len || k < x.keys[j])))
          @(matching x.ptrs[j] yields x.keys[j-1]) // TODO remove if not needed
          @(matching x.ptrs[j] yields x.keys[j])
  ensures forall n: Node, n1: Node, j: Int ::
    x.ptrs[0] != null && {n} == {x} && n1 in {x.ptrs[j]} && 0 <= j <= i <= x.len
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 1
    // TODO simplification removes n -- disable?
  // contents are within range
  requires x.ptrs[0] != null || x.rangeLb <= x.keys[0] && x.keys[x.len-1] < x.rangeUb
  ensures forall k: Int :: x.ptrs[0] == null && i <= x.len && k in set_of_map(x.keys.map, 0, i)
    ==> inf_of_node(x, x.rangeLb, x.rangeUb)[x].ks[k] >= 1
  // edgeset != {} ==> pc >= 1
  ensures forall n: Node, n1: Node, k: Int ::
    fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k]
    <= fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc
{
  if (i >= 0) {
    lemma_int_of_node(x, i-1);
    if (i > 0)
      extend_right(x.keys.map, 0, i-1);
  }
}


/** Lemmas to deal with conjunction */

// This follows from semantics of sync not modifying heap
procedure gamma_sync(x: Node, Ix: Interface, Ix1: Interface)
  returns ()
  requires [gamma(x, Ix1)](Ix) &*& intValid(Ix1) == true &*& intEq(Ix, Ix1) == true
  ensures [gamma(x, Ix1)](Ix1) &*& unchanged(x)

// This lemma depends on the flow domain being a function domain -- generalize?
lemma lemma_pred(k: Int, x: Node, Ix: Interface, I2: Interface, I: Interface)
  returns (y: Node, Iy: Interface, I3: Interface)
  requires Gr(I2)
  requires intComp(Ix, I2) == I && Ix.FP == {x}
  requires Ix.inf[x].ks[k] > 0 && I.inf[x].ks[k] == 0
  ensures N(y, Iy) &*& Gr(I3)
  ensures I2 == intComp(Iy, I3)
  ensures Iy.inf[y].ks[k] > 0 && Iy.fm[y][x].ks[k] > 0

lemma lemma_gamma_comp_sing_int(x: Node, Ix: Interface, I2: Interface)
  returns (I: Interface)
  requires [gamma(x, Ix)](Ix) &*& Gr(I2)
  ensures [gamma(x, Ix)](Ix) &*& Gr(I2) &*& intComp(Ix, I2) == I &*& I != intUndef
  ensures unchanged(x)

lemma lemma_disj_gamma(I1: Interface, I2: Interface,
                       x: Node, Ix: Interface, I3: Interface)
  returns (I4: Interface)
  requires (Gr(I1) &*& Gr(I2)) && ([gamma(x, Ix)](Ix) &*& Gr(I3))
  requires ndLeq(Ix.na, I1.na) == false
  ensures Gr(I1) &*& [gamma(x, Ix)](Ix) &*& Gr(I4)
    &*& I2 == intComp(Ix, I4) &*& I3 == intComp(I1, I4)
  ensures unchanged(x)


/** Begin programs */

var TID: Int;
axiom TID > 0;
var r: Node;

/** lock */
procedure lock(x: Node, Ix: Interface, I2: Interface, I: Interface)
  returns (Ix1: Interface, I1: Interface)
  requires spl_state_aa(x, Ix, I2, I)
  ensures spl_state_ab(x, Ix1, I2, I1)
{
  lemma_conc(x, Ix);

  // CAS(x.locktid, 0, TID)
  if (x.locktid == 0) {
    x.locktid := TID;

    pure assume Ix1 != intUndef && Ix1.inf == Ix.inf && Ix1.na.contents == Ix.na.contents && Ix1.na.lockinfo == locked(TID) && Ix1.fm == Ix.fm && Ix1.FP == Ix.FP && Ix1.FPo == Ix.FPo;
    lemma_int_valid_unfold(Ix);
    lemma_int_valid_fold(Ix1);
    lemma_abs(x, Ix, Ix1);
    sync(Ix, Ix1);
    I1 := lemma_Gr_comp_int(Ix1, I2);
    lemma_repl(I, Ix, I2, Ix1, I1);
  } else {
    lemma_conc_rev(x, Ix);
    Ix1, I1 := lock(x, Ix, I2, I);
  }
}

/** unlock */
procedure unlock(x: Node, Ix: Interface, I2: Interface, I: Interface)
  returns (Ix1: Interface, I1: Interface)
  requires spl_state_ab(x, Ix, I2, I)
  ensures spl_state_aa(x, Ix1, I2, I1)
{
  lemma_conc(x, Ix);

  x.locktid := 0;

  pure assume Ix1 != intUndef && Ix1.inf == Ix.inf && Ix1.na.contents == Ix.na.contents && Ix1.na.lockinfo == unlocked && Ix1.fm == Ix.fm && Ix1.FP == Ix.FP && Ix1.FPo == Ix.FPo;
  lemma_int_valid_unfold(Ix);
  lemma_int_valid_fold(Ix1);
  lemma_abs(x, Ix, Ix1);
  sync(Ix, Ix1);
  I1 := lemma_Gr_comp_int(Ix1, I2);
  lemma_repl(I, Ix, I2, Ix1, I1);
}

/** inRange */
procedure inRange(x: Node, k: Int, Ix: Interface)
  returns (res: Bool)
  requires gamma(x, Ix) &*& Ix.na.lockinfo == locked(TID)
  ensures gamma(x, Ix) &*& (res ==> Ix.inf[x].ks[k] >= 1)
{
  if (x.rangeLb <= k && x.rangeUb > k)
    return true;
  else
    return false;
}

/** findNext */
procedure findNext(x: Node, k: Int, Ix: Interface)
  returns (n: Node)
  requires gamma(x, Ix)
  requires intValid(Ix) == true && Ix.na.lockinfo == locked(TID)
  ensures gamma(x, Ix)
  ensures (n != null && Ix.fm[x][n].ks[k] >= 1
           || n == null && (forall y: Node :: Ix.fm[x][y].ks[k] == 0))
{
  if (x.ptrs[0] == null) {  // Leaf node
    lemma_int_valid_unfold(Ix);
    return null;
  }

  var found, i := arr_find(x.keys, x.len, k+1);

  n := x.ptrs[i];
  // return n;
}


/** member */
procedure member(x: Node, k: Int, Ix: Interface, I2:Interface, I: Interface)
  returns (res: Bool, Ix1: Interface, I1: Interface)
  requires N(x, Ix) &*& Gr(I2)
  requires intValid(Ix) == true && intValid(I2) == true
  requires intComp(Ix, I2) == I && globalInt(I) && Ix.na.lockinfo == locked(TID)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures N(x, Ix1) &*& Gr(I2)
  ensures intValid(Ix1) == true && intValid(I2) == true
  ensures intComp(Ix1, I2) == I1 && globalInt(I1) && Ix1.na.lockinfo == locked(TID)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures Ix1.na.contents == Ix.na.contents && (res == k in Ix.na.contents)
{
  lemma_conc(x, Ix);
  pure assume x.ptrs[0] == null; // x is a leaf.
  // TODO prove using induction from gamma & k !in any outgoing edgeset

  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  lemma_conc_rev(x, Ix);

  return res, Ix, I;
}


/** insert */
procedure insert(x: Node, k: Int, Ix: Interface, I2:Interface, I: Interface)
  returns (res: Bool, Ix1: Interface, I1: Interface)
  requires N(x, Ix) &*& Gr(I2)
  requires intValid(Ix) == true && intValid(I2) == true
  requires intComp(Ix, I2) == I && globalInt(I) && Ix.na.lockinfo == locked(TID)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures N(x, Ix1) &*& Gr(I2)
  ensures intValid(Ix1) == true && intValid(I2) == true
  ensures intComp(Ix1, I2) == I1 && globalInt(I1) && Ix1.na.lockinfo == locked(TID)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures Ix1.na.contents == Ix.na.contents ++ {k} && (res == k !in Ix.na.contents)
{
  lemma_conc(x, Ix);
  pure assume x.ptrs[0] == null; // x is a leaf.
  // TODO prove using induction from gamma & k !in any outgoing edgeset

  pure assume x.len < 2*B - 1; // TODO allow insert to give up if full
  
  // Change nodel label to allow breaking gammaG
  var Ix2: Interface;
  pure assume Ix2 != intUndef && Ix2.na.lockinfo == dirtylock(TID)
    && Ix2.na.contents == Ix.na.contents
    && Ix2.FP == Ix.FP && Ix2.FPo == Ix.FPo && Ix2.inf == Ix.inf && Ix2.fm == Ix.fm
    // TODO needed to prove intValid(Ix2);
    && (forall n: Node, n1: Node :: n !in Ix.FP ==> domEq(domZero(), Ix.inf[n])
       @(matching Ix2.inf[n] yields Ix.inf[n].ks)
       @(matching Ix2.fm[n][n1] yields Ix.fm[n][n1].ks));
  lemma_int_valid_unfold(Ix);
  lemma_int_valid_fold(Ix2);
  gamma_sync(x, Ix, Ix2);
  var I3 := lemma_gamma_comp_sing_int(x, Ix2, I2);
  lemma_repl(I, Ix, I2, Ix2, I3);

  ghost var m := x.keys.map;

  var idx, new_len := arr_insert(x.keys, k, x.len); // TODO argument order consistent

  map_insert_content_set(m, x.keys.map, idx, k, x.len, new_len);

  x.len := new_len;

  // Change node label back, remove k from contents
  pure assume Ix1 != intUndef && Ix1.na.lockinfo == locked(TID)
    && Ix1.na.contents == Ix2.na.contents ++ {k}
    && Ix1.FP == Ix2.FP && Ix1.FPo == Ix2.FPo
    && Ix1.inf == Ix2.inf && Ix1.fm == Ix2.fm;
  lemma_int_valid_unfold(Ix2);
  lemma_int_valid_fold(Ix1);
  lemma_abs(x, Ix2, Ix1);
  sync(Ix2, Ix1);
  var I4 := lemma_Gr_comp_int(Ix1, I2);
  lemma_repl(I3, Ix2, I2, Ix1, I4);

  if (k in Ix.na.contents)  // TODO why?
    return false, Ix1, I4;
  else
    return true, Ix1, I4;
}


/** delete */
procedure delete(x: Node, k: Int, Ix: Interface, I2:Interface, I: Interface)
  returns (res: Bool, Ix1: Interface, I1: Interface)
  requires N(x, Ix) &*& Gr(I2)
  requires intValid(Ix) == true && intValid(I2) == true
  requires intComp(Ix, I2) == I && globalInt(I) && Ix.na.lockinfo == locked(TID)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures N(x, Ix1) &*& Gr(I2)
  ensures intValid(Ix1) == true && intValid(I2) == true
  ensures intComp(Ix1, I2) == I1 && globalInt(I1) && Ix1.na.lockinfo == locked(TID)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures Ix1.na.contents == Ix.na.contents -- {k} && (res == k in Ix.na.contents)
{
  lemma_conc(x, Ix);
  pure assume x.ptrs[0] == null; // x is a leaf.
  // TODO prove using induction from gamma & k !in any outgoing edgeset
    
  // Change nodel label to allow breaking gammaG
  var Ix2: Interface;
  pure assume Ix2 != intUndef && Ix2.na.lockinfo == dirtylock(TID)
    && Ix2.na.contents == Ix.na.contents
    && Ix2.FP == Ix.FP && Ix2.FPo == Ix.FPo && Ix2.inf == Ix.inf && Ix2.fm == Ix.fm
    // TODO needed to prove intValid(Ix2);
    && (forall n: Node, n1: Node :: n !in Ix.FP ==> domEq(domZero(), Ix.inf[n])
       @(matching Ix2.inf[n] yields Ix.inf[n].ks)
       @(matching Ix2.fm[n][n1] yields Ix.fm[n][n1].ks));
  lemma_int_valid_unfold(Ix);
  lemma_int_valid_fold(Ix2);
  gamma_sync(x, Ix, Ix2);
  var I3 := lemma_gamma_comp_sing_int(x, Ix2, I2);
  lemma_repl(I, Ix, I2, Ix2, I3);

  ghost var m := x.keys.map;

  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  x.len := new_len;

  // Change node label back, remove k from contents
  pure assume Ix1 != intUndef && Ix1.na.lockinfo == locked(TID)
    && Ix1.na.contents == Ix2.na.contents -- {k}
    && Ix1.FP == Ix2.FP && Ix1.FPo == Ix2.FPo
    && Ix1.inf == Ix2.inf && Ix1.fm == Ix2.fm;
  lemma_int_valid_unfold(Ix2);
  lemma_int_valid_fold(Ix1);
  lemma_abs(x, Ix2, Ix1);
  sync(Ix2, Ix1);
  var I4 := lemma_Gr_comp_int(Ix1, I2);
  lemma_repl(I3, Ix2, I2, Ix1, I4);

  return (k in Ix2.na.contents), Ix1, I4;
}


/** split */

// Lemma that all keys in a node come from its parent
lemma lemma_inheritance(k: Int, k1: Int, p: Node, Ip: Interface, c: Node, Ic: Interface,
                        I2: Interface, I: Interface)
  requires N(p, Ip) &*& N(c, Ic) &*& Gr(I2)
  requires I == intComp(Ip, intComp(Ic, I2)) &*& globalInt(I)
  requires Ic.inf[c].ks[k] >= 1 && c != r
  requires Ip.inf[p].ks[k1] >= 1 && Ip.fm[p][c].ks[k1] >= 1
  ensures N(p, Ip) &*& N(c, Ic) &*& Gr(I2)
  ensures Ip.inf[p].ks[k] >= 1 && Ip.fm[p][c].ks[k] >= 1
{
  lemma_intro_conj_2(Ip, I2);
  var I3 := lemma_Gr_comp(Ip, I2);
  var y, Iy, I4 := lemma_pred(k, c, Ic, I3, I);
  if (y != p) {
    var I5 := lemma_disj_fp(Iy, I4, Ip, I2);
    lemma_conc(c, Ic);
    lemma_conc(p, Ip);
    lemma_conc(y, Iy);
    lemma_inf_geq(c, Ic, p, Ip, y, Iy, intComp(Ic, intComp(Ip, Iy)));

    pure assert false;
  } else {
    lemma_disj_eq(Iy, I4, Ip, I2);
  }
}


procedure split_node(p: Node, Ip: Interface, c: Node, Ic: Interface, c_idx: Int,
                     n: Node, In: Interface, Ipcn: Interface)
  returns (Ip1: Interface, Ic1: Interface, In1: Interface, Ipcn1: Interface)
  requires gamma(p, Ip) &*& gamma(c, Ic) &*& (acc(n) &*& acc(n.ptrs) &*& acc(n.keys))
  requires In.FP == {n} && domEq(In.inf[n], domZero()) == true && In.FPo == {}
  requires intValid(Ip) == true && intValid(Ic) == true && intValid(In) == true
  requires Ip.na.lockinfo == locked(TID) && Ic.na.lockinfo == locked(TID)
  requires intComp(Ip, intComp(Ic, In)) == Ipcn && intValid(Ipcn) == true
  requires n.keys.length == 2*B && n.ptrs.length == 2*B
  requires 0 < p.len < p.keys.length - 1 && c.len == 2 * B - 1
  requires p.ptrs[0] != null  // p is an internal node. TODO?
  requires 0 <= c_idx < p.len && p.ptrs[c_idx] == c
  // Consequence of acyclicity
  requires domEq(Ic.fm[c][p], domZero()) == true
  // This follows from lemma_inheritance
  requires forall k: Int :: Ic.inf[c].ks[k] == 1 ==> Ip.inf[p].ks[k] == 1 && Ip.fm[p][c].ks[k] == 1
  // TODO create and mark node - inflow will be 0, so nothing else can point to it
  requires forall i: Int :: 0 <= i <= p.len ==> p.ptrs[i] != n;
  requires forall i: Int :: 0 <= i <= c.len ==> c.ptrs[i] != n;

  ensures gamma(p, Ip1) &*& gamma(c, Ic1) &*& gamma(n, In1)
  ensures intValid(Ip1) == true && intValid(Ic1) == true && intValid(In1) == true
  ensures Ip1.na.lockinfo == locked(TID) && Ic1.na.lockinfo == locked(TID)
  ensures intComp(Ip1, intComp(Ic1, In1)) == Ipcn1 && intEq(Ipcn, Ipcn1) == true
  ensures Ipcn.na.contents == Ipcn1.na.contents
{
  var m := (c.len / 2) + 1;
  var k := c.keys[m - 1];

  // Create a new node n
  n.locktid := 0;
  n.rangeLb := k;
  n.rangeUb := c.rangeUb;

  if (c.ptrs[0] == null) {  // Leaf
    arr_copy(c.keys, n.keys, m - 1, 0, c.len - m + 1);
    n.ptrs[0] := null;
    n.len := m;
  } else {  // Internal node
    arr_copy(c.keys, n.keys, m, 0, c.len - m);
    arr_copy_node(c.ptrs, n.ptrs, m, 0, c.len - m + 1);
    n.len := m - 1;
  }
  c.len := m - 1;
  c.rangeUb := k;

  pure assert p.rangeLb <= p.keys[0] && p.keys[p.len-1] < p.rangeUb;
  var old_p_keys := p.keys.map;
  // Shift keys of p and insert link to n
  var k_idx, new_len := arr_insert(p.keys, k, p.len);

  // Prove c_idx == k_idx
  pure assert Ic.inf[c].ks[k] == 1 && Ip.fm[p][c].ks[k] == 1 && c == p.ptrs[c_idx];
  pure assert Ic.inf[c].ks[c.keys[0]] == 1 && Ip.fm[p][c].ks[c.keys[0]] == 1 && c == p.ptrs[c_idx];
  pure assert k_idx == c_idx;

  arr_shift_node(p.ptrs, k_idx + 1, k_idx + 2, p.len - k_idx);
  p.ptrs[k_idx + 1] := n;
  p.len := new_len;


  // Show that nodes are good with new interfaces

  //  var Ip1 := int(Ip.inf, Ip.na, Ip1fm, Ip.FP, Ip.FPo ++ {n}); TODO expand in symbexec
  pure assume Ip1 != intUndef && Ip1.inf == Ip.inf && Ip1.na == Ip.na
    && Ip1.fm == fm_of_node(p, p.keys.map, p.ptrs.map, p.len, p.len)
    && Ip1.FP == Ip.FP && Ip1.FPo == fpo_of_node(p, p.keys.map, p.ptrs.map, p.len, p.len);
  lemma_int_valid_unfold(Ip);
  lemma_int_of_node(p, p.len);
  lemma_int_valid_fold(Ip1);
  pure assert Ic.inf[c].ks[k] == 1 && Ip.inf[p].ks[k] == 1;
  //  assert gamma(p, Ip1) &*& gammaSpatial(c) &*& gammaSpatial(n);

  pure assume Ic1 != intUndef && Ic1.na.lockinfo == Ic.na.lockinfo
    && (Ic1.na.contents == set_of_map(c.keys.map, 0, c.len) && c.ptrs[0] == null
       || Ic1.na.contents == {} && c.ptrs[0] != null)
    && Ic1.FP == Ic.FP
    && Ic1.inf == inf_of_node(c, c.rangeLb, c.rangeUb)
    && Ic1.fm == fm_of_node(c, c.keys.map, c.ptrs.map, c.len, c.len)
    && Ic1.FPo == fpo_of_node(c, c.keys.map, c.ptrs.map, c.len, c.len);    
  lemma_int_valid_unfold(Ic);
  lemma_int_of_node(c, c.len);
  lemma_int_valid_fold(Ic1);
  // assert gammaSpatial(p) &*& gamma(c, Ic1) &*& gammaSpatial(n);

  pure assume In1 != intUndef && In1.na.lockinfo == unlocked
    && (In1.na.contents == set_of_map(n.keys.map, 0, n.len) && n.ptrs[0] == null
       || In1.na.contents == {} && n.ptrs[0] != null)
    && In1.FP == In.FP
    && In1.inf == inf_of_node(n, n.rangeLb, n.rangeUb)
    && In1.fm == fm_of_node(n, n.keys.map, n.ptrs.map, n.len, n.len)
    && In1.FPo == fpo_of_node(n, n.keys.map, n.ptrs.map, n.len, n.len);    
  lemma_int_valid_unfold(In);
  lemma_int_of_node(n, n.len);
  lemma_int_valid_fold(In1);
  // assert gammaSpatial(p) &*& gammaSpatial(c) &*& gamma(n, In1);

  //  assert gamma(p, Ip1) &*& gamma(c, Ic1) &*& gamma(n, In1);

  // Compose the new interfaces
  lemma_int_comp_unfold_3(p, Ip, c, Ic, n, In, Ipcn);
  pure assert domLeq(domMult(Ip1.inf[p], Ip1.fm[p][c]), Ic1.inf[c]) == true;
  //  Ipcn1 := lemma_int_comp_fold_3(p, Ip1, c, Ic1, n, In1);
  // Show that interface of region is contextually extended
  pure assume false;
}

/*
procedure foo(a: Array<Int>, lenn: Int, k: Int, u: Int)
  returns (idx: Int, new_len: Int)
  requires lenn < a.length
  requires m[lenn-1] < u
  ensures m1[new_len-1] < u
{
  new_len := lenn + 1;
  m1 := map_shift(m, idx, idx + 1, lenn - idx);
}
 */

/* Intermediate states */

define spl_state_aa(x, Ix, I2, I) {
  N(x, Ix) &*& Gr(I2)
    &*& (intValid(Ix) == true && intValid(I2) == true && intComp(Ix, I2) == I && globalInt(I))
}

define spl_state_ab(x, Ix, I2, I) {
  N(x, Ix) &*& Gr(I2)
    &*& (intValid(Ix) == true && intValid(I2) == true && intComp(Ix, I2) == I && globalInt(I)
    && Ix.na.lockinfo == locked(TID))
}


define spl_state_ba(x, Ix, I2, I, k) {
  spl_state_ab(x, Ix, I2, I) &*& (Ix.inf[x].ks[k] >= 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0))
}


/** Stability proofs */

/*

define spl_state_ac(x, Ix, I2, I) {
  [gamma(x, Ix)](Ix) &*& Gr(I2)
    &*& (intValid(Ix) == true && intValid(I2) == true && intComp(Ix, I2) == I && globalInt(I))
}


define spl_state_ad(x, Ix, I2, I, k, i, flag) {
  spl_state_ac(x, Ix, I2, I)
    &*& (Ix.inf[x].ks[k] >= 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
       && (!flag ==> (i >= x.len || k <= x.keys[i]))
       && (i == 0 || x.keys[i-1] < k) && 0 <= i && i <= x.len
       && Ix.na.lockinfo == locked(TID))
}


procedure stability_ac_lock(c: Node, Ic: Interface, I2: Interface, I: Interface,
                            x: Node, Ix: Interface, Io: Interface, t: Int)
  returns (I21: Interface, I1: Interface)
  requires spl_state_ac(c, Ic, I2, I) && (action_lock_pre(x, Ix) &*& Gr(Io)) &*& t != TID
  ensures spl_state_ac(c, Ic, I21, I1)
{
  var I3 := lemma_disj_gamma(Ix, Io, c, Ic, I2);

  var Ix1 := action_lock(x, Ix, t);
  // N(c, Ic) &*& N(x, Ix1) &*& Gr(I3)

  I21 := lemma_Gr_comp(Ix1, I3);
  I1 := lemma_gamma_comp_sing_int(c, Ic, I21);
  // N(c, Ic) &*& Gr(I21)
  lemma_repl(I, Ix, Io, Ix1, I1);
  lemma_int_valid_unfold(I1);
}

 */

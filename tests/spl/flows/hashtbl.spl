/** Hash table implementation of the link template for linearizable dictionaries. */

options "-simplearrays -symbexec -propreads -abspreds"

include "../include/flows.spl";
include "array_util.spl";


/** Flow domain definitions */

datatype FlowDom = fd(ks: Map<K, Int>, ir: Map<K, Int>);

pure predicate domEq(p1: FlowDom, p2: FlowDom) {
  (forall k: K :: p1.ks[k] == p2.ks[k]
   @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
    && (forall k: K :: p1.ir[k] == p2.ir[k]
       @(matching p1.ir[k] yields p2.ir[k]) @(matching p2.ir[k] yields p1.ir[k]))

}

pure predicate domLeq(p1: FlowDom, p2: FlowDom) {
  (forall k: K :: p1.ks[k] <= p2.ks[k]
   @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
    && (forall k: K :: p1.ir[k] <= p2.ir[k]
       @(matching p1.ir[k] yields p2.ir[k]) @(matching p2.ir[k] yields p1.ir[k]))
}

pure function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures forall k: K :: p.ks[k] == p1.ks[k] + p2.ks[k]
  ensures forall k: K :: p.ir[k] == p1.ir[k] + p2.ir[k]

pure function domMult(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures forall k: K :: p.ks[k] == p1.ks[k] * p2.ks[k]
  ensures forall k: K :: p.ir[k] == p1.ir[k] * p2.ir[k]

pure function domZero() returns(p: FlowDom)
  ensures forall k: K :: p.ks[k] == 0 && p.ir[k] == 0


datatype InrFn = inrfnC(inrfn: Map<Node, Set<K>>, inrdom: Set<Node>) | inrfnUndef;
  
datatype NodeDom = nd(contents: Set<K>, inr: InrFn);

pure predicate ndLeq(a1: NodeDom, a2: NodeDom) {
  (forall k: K :: k in a1.contents ==> k in a2.contents)
    && (a2.inr == inrfnUndef || a1.inr != inrfnUndef && a2.inr != inrfnUndef
       && (forall x: Node :: x in a1.inr.inrdom ==> x in a2.inr.inrdom && a1.inr.inrfn[x] == a2.inr.inrfn[x]))
}


/** Definition of a node */

datatype NodeType = root | bucket | nodeTop;

struct Node {
  var locktid: Int;
  var len: Int;
  var bkts: Array<Node>;
  var keys: Array<K>;
  var next: Node;
  ghost var typ: NodeType;
}

define unchanged(x) {
  x.locktid == old(x.locktid) && x.len == old(x.len) && x.bkts == old(x.bkts)
    && x.keys == old(x.keys) && x.next == old(x.next) && x.typ == old(x.typ)
    && x.bkts.length == old(x.bkts.length) && x.bkts.map == old(x.bkts.map)
    && x.keys.length == old(x.keys.length) && x.keys.map == old(x.keys.map)
}


procedure newNode(xlock: Int, xlen: Int, xkeyslen: Int, xnext: Node)
  returns (x: Node, Ix: Interface)
  requires emp
  ensures [acc(x) &*& acc(x.bkts) &*& acc(x.keys)](Ix)
  ensures x.locktid == xlock && x.len == xlen && x.keys.length == xkeyslen && x.next == xnext
  ensures intValid(Ix) && Ix.FP == {x} && domEq(Ix.inf[x], domZero()) == true && Ix.FPo == {}


/** Definition of good condition, gamma */

function hash(x: Node, k: K) returns (i: Int)

define hrepSpatial(x) {
  acc(x) &*& acc(x.bkts)  &*& acc(x.keys)
}

define hrep(x, I) {
  hrepSpatial(x) &*& I.FP == {x}
  && 0 <= x.len && x.len < x.keys.length
    && ((x.typ == root
        && (forall i: Int :: 0 <= i && i < x.bkts.length ==> x.bkts[i] != null)
        && (forall y: Node, k: K :: y == x.bkts[hash(x, k)] ==> I.fm[x][y].ks[k] == 1)
        && (forall k: K :: 0 <= hash(x, k) && hash(x, k) < x.bkts.length)
        && (forall k: K :: I.inf[x].ks[k] == 1 /* && k in outset(x, I.fm)*/))
     || (x.typ == bucket
        && (forall i: Int, j: Int :: 0 <= i < j < x.len ==> lt(x.keys[i], x.keys[j]))
        && I.na.contents == set_of_map(x.keys.map, 0, x.len)
        && (x.next == null && I.FPo == {}
        || x.next != null && (forall k: K :: I.fm[x][x.next].ks[k] == 1) && I.FPo == {x.next})))
}

lemma keyset_implies_bucket(x: Node, Ix: Interface, k: K)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix) &*& unchanged(x)
  ensures x.typ == bucket
{
  if (x.typ == root) {
    var y := x.bkts[hash(x, k)];
    pure assert Ix.fm[x][y].ks[k] == 1;
  }
}


/** Begin programs */

var TID: Int;
axiom TID > 0;


/** findNext **/
procedure findNext(x: Node, k: K, Ix: Interface)
  returns (n: Node)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  ensures hrep(x, Ix)
  ensures (n != null && Ix.fm[x][n].ks[k] >= 1
           || n == null && (forall y: Node :: Ix.fm[x][y].ks[k] == 0))
{
  if (x.typ == root) {
    n := x.bkts[hash(x, k)];
  } else {
    pure assert x.typ == bucket;
    if (x.next == null) {
      n := null;
      lemma_int_valid_unfold(Ix);
    } else {
      n := x.next;
    }
  }
  //    return n;
}


/** member */
procedure member(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents && (res == k in Ix.na.contents))
{
  keyset_implies_bucket(x, Ix, k);
  
  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  return true, res, Ix;
}


/** insert */
procedure insert(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents ++ {k} && (res == k !in Ix.na.contents))
{
  keyset_implies_bucket(x, Ix, k);

  if (x.len < x.keys.length - 1) {
  
    ghost var m := x.keys.map;

    var idx, new_len := arr_insert(x.keys, k, x.len);
    // TODO argument order consistent

    map_insert_content_set(m, x.keys.map, idx, k, x.len, new_len);

    x.len := new_len;

    // Define Ix1 to be Ix, but with k added to contents
    Ix1 := copy_interface(Ix, nd(Ix.na.contents ++ {k}, Ix.na.inr));
    lemma_int_valid_unfold(Ix);
    lemma_int_valid_fold(Ix1);

    if (k in Ix.na.contents)  // TODO why?
      return true, false, Ix1;
    else
      return true, true, Ix1;
  } else {
    return false, false, Ix;
  }
}


/** delete */
procedure delete(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents -- {k} && (res == k in Ix.na.contents))
{
  keyset_implies_bucket(x, Ix, k);

  ghost var m := x.keys.map;

  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  x.len := new_len;

  // Define Ix1 to be Ix, but with k removed from contents
  Ix1 := copy_interface(Ix, nd(Ix.na.contents -- {k}, Ix.na.inr));
  lemma_int_valid_unfold(Ix);
  lemma_int_valid_fold(Ix1);

  return true, (k in Ix.na.contents), Ix1;
}


/*
procedure copyNode(x: Node, Ix: Interface, I2: Interface, I: Interface)
  returns (I1: Interface)
  requires [gamma(x, Ix)](Ix) &*& Gr(I2)
  requires intValid(Ix) == true && intValid(I2) == true
  requires intComp(Ix, I2) == I && globalInt(I) && Ix.na.lockinfo == locked(TID)
  requires x.typ == bucket && x.len == x.keys.length
  ensures Gr(I1) &*& globalInt(I)
{
  var y: Node, Iy: Interface;
  y, Iy := newNode(0, x.len, 2 * x.keys.length, null);

  var i := 0;
  while (i < x.len)
    invariant [gamma(x, Ix)](Ix) &*& [acc(y) &*& acc(y.bkts) &*& acc(y.keys)](Iy) &*& Gr(I2)
    invariant intValid(Ix) == true && intValid(Iy) == true && intValid(I2) == true
    invariant intComp(Ix, I2) == I && globalInt(I) && Ix.na.lockinfo == locked(TID)
    invariant x.typ == bucket && x.len == x.keys.length
    invariant 0<= i && i <= x.len && y.keys.length == 2 * x.len && y.next == null
    invariant forall j: Int :: 0 <= j < i ==> y.keys[j] == x.keys[j]
  {
    y.keys[i] := x.keys[i];
  }

  x.next := y;

  var Ix1: Interface;
  pure assume Ix1.inf == Ix.inf && Ix1.na.contents == {}
  && Ix1.na.lockinfo == Ix.na.lockinfo
  && (forall k: K :: Ix1.fm[x][y].ks[k] == 1) && (forall k: K :: Ix1.fm[x][y].ir[k] == 0)
  && (forall z: Node :: domEq(Ix1.fm[x][y], domZero()) == true)
  && Ix1.FP == Ix.FP && Ix1.FPo == {y};
  // TODO  var Ix1 := int(Ix.inf, nd({}, Ix.na.lockinfo, x.typ), )

  var Iy1: Interface;
  pure assume Iy1.inf == Ix.inf && Iy1.na.contents == Ix.na.contents
  && Iy1.FP == Iy.FP && Iy1.FPo == Iy.FPo
  && (forall z: Node :: domEq(Iy1.fm[y][z], domZero()) == true);

  lemma_int_valid_fold(Ix1);
  lemma_abs(x, Ix, Ix1);
  lemma_int_valid_fold(Iy1);
  lemma_int_valid_unfold(Iy);
  lemma_abs(y, Iy, Iy1);

  var Ixy1 := lemma_int_comp_fold(x, Ix, y, Iy);
  //  var I0 := lemma_comp_sing_int(y, Iy, I);

  // sync();
}
 */

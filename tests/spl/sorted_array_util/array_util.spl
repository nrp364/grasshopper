include "../include/ordered_type.spl"

// project map segment m[i..j] to set of its elements
function set_of_map(m: Map<Int, K>, i: Int, j: Int)
  returns (res: Set<K>)
  requires 0 <= i <= j
{
  i < j ? {m[i]} ++ set_of_map(m, i + 1, j) : {}
}

lemma extend_right(m: Map<Int, K>, i: Int, j: Int)
  requires i <= j
  pure ensures set_of_map(m, i, j) ++ {m[j]} == set_of_map(m, i, j + 1)
{
  if (i == j) {
  } else {
    extend_right(m, i + 1, j);
  }
}

lemma in_set_of_map(m: Map<Int, K>, i: Int, j: Int)
  requires 0 <= i <= j
  ensures forall k: Int :: i <= k < j ==> m[k] in set_of_map(m, i, j)
{
  if (i >= j) {
  } else {
    in_set_of_map(m, i + 1, j);
  }
}

lemma set_of_map_split(m: Map<Int, K>, i: Int, j: Int, k: Int)
  requires i <= j <= k
  ensures set_of_map(m, i, k) == set_of_map(m, i, j) ++ set_of_map(m, j, k)
{
  if (j == k) {
  } else {
    extend_right(m, i, j);
    set_of_map_split(m, i, j + 1, k);
  }
}

lemma set_of_map_equal(m1: Map<Int, K>, m2: Map<Int, K>, i1: Int, i2: Int, len: Int)
  requires forall j: Int :: i1 <= j < i1 + len ==> m1[j] == m2[j + (i2 - i1)] @(matching m1[j] yields m2[j + (i2 - i1)])
  ensures set_of_map(m1, i1, i1 + len) == set_of_map(m2, i2, i2 + len)
{
  if (len <= 0) {
  } else {
    assume len > 0;
    set_of_map_equal(m1, m2, i1 + 1, i2 + 1, len - 1);
  }
}

lemma frame_set_of_map(m: Map<Int, K>, i: Int, j: Int)
  requires i <= j
  ensures forall i1: Int, k: K :: i1 < i || j <= i1 ==> set_of_map(m, i, j) == set_of_map(m[i1 := k], i, j)
{
  if (i == j) {
  } else {
    frame_set_of_map(m, i + 1, j);
  }
}

lemma not_in_sorted_seg(m: Map<Int, K>, i: Int, j: Int, k: K, implicit ghost C: Set<K>)
  requires sorted_map_seg(m, i, j) && C == set_of_map(m, i, j)
  ensures i >= j || lt(k, m[i]) || lt(m[j-1], k) ==> k !in C
{
  if (i >= j) return;

  if (lt(m[j - 1], k)) {
    extend_right(m, i, j - 1);
    not_in_sorted_seg(m, i, j - 1, k);
    return;
  }

  if (lt(k, m[i])) {
    not_in_sorted_seg(m, i + 1, j, k);    
    return;
  }
  
}

function shift_map(m: Map<Int, K>, src: Int, dst: Int, len: Int)
  returns (res: Map<Int, K>)
  requires 0 <= len
{
  { i: Int :: i < dst || dst + len <= i ? m[i] : m[src + (i - dst)]
    @(matching res[i] yields m[src + (i - dst)])
    @(matching res[i] yields m[i])}
}


function map_of_array(a: Array<K>) returns (res: Map<Int, K>)
  requires acc(a)
{
  { i: Int :: 0 <= i < a.length ? a[i] : bottom
    @(matching res[i] yields a[i])
    @(matching a[i] yields res[i]) }
}

predicate sorted_map_seg(m: Map<Int, K>, i: Int, j: Int)
{
  forall i1: Int, i2: Int :: i <= i1 < i2 < j ==> lt(m[i1], m[i2])
}
 
predicate sorted_array_seg(a: Array<K>, i: Int, j: Int)
  requires acc(a)
{
  0 <= i && j <= a.length && sorted_map_seg(map_of_array(a), i, j)
}

function set_of_array(a: Array<K>, i: Int, j: Int) returns (res: Set<K>)
  requires acc(a) &*& 0 <= i && j <= a.length
{
  set_of_map(map_of_array(a), i, j)
}
  
predicate sorted_array_seg_with_content(a: Array<K>, i: Int, j: Int, C: Set<K>)
  requires acc(a)
{
  
  sorted_array_seg(a, i, j) && C == set_of_array(a, i, j)
}

predicate sorted_array_with_content(a: Array<K>, len: Int, C: Set<K>)
{
  0 <= len &*&
  acc(a) &*& sorted_array_seg_with_content(a, 0, len, C)
}


procedure shift(a: Array<K>, src: Int, dst: Int, len: Int)
  requires acc(a)
  requires 0 <= src <= src + len <= a.length && 0 <= dst <= dst + len <= a.length
  ensures acc(a)
  ensures map_of_array(a) == shift_map(old(map_of_array(a)), src, dst, len)
{
  var ghost m := map_of_array(a);

  if (src < dst) {
    var i := len - 1;

    while (i >= 0) 
      invariant acc(a)
      invariant src < dst
      invariant 0 <= src <= src + len <= a.length
      invariant 0 <= dst <= dst + len <= a.length
      invariant -1 <= i < len
      invariant shift_map(m, src + i + 1, dst + i + 1, len - i - 1) == map_of_array(a)
    {
      var ghost m1 := map_of_array(a);
      var tmp := a[src + i];
      a[dst + i] := tmp;
      pure assert map_of_array(a) == m1[dst + i := tmp];
      i := i - 1;
    }
  } else if (src > dst) {
    var i := 0;
    while (i < len)
      invariant acc(a)
      invariant src > dst
      invariant 0 <= src <= src + len <= a.length
      invariant 0 <= dst <= dst + len <= a.length
      invariant 0 <= i <= len 
      invariant shift_map(m, src, dst, i) == map_of_array(a)
    {
      var ghost m1 := map_of_array(a);
      var tmp := a[src + i];
      a[dst + i] := a[src + i];
      pure assert map_of_array(a) == m1[dst + i := tmp];
      i := i + 1;
    }
  }
}

// Find key `k` in sorted array segment `a[0..len]` using binary search
procedure find(a: Array<K>, len: Int, k: K, implicit ghost C: Set<K>)
  returns (found: Bool, idx: Int)
  requires sorted_array_with_content(a, len, C)
  requires 0 <= len <= a.length
  ensures sorted_array_with_content(a, len, C)
  // what we actually care about
  ensures 0 <= idx <= len
  ensures found == (k in C)
  ensures found ==> a[idx] == k
  ensures !found ==> idx == len || lt(k, a[idx])
  ensures 0 < idx ==> lt(a[idx - 1], k)
  ensures k !in set_of_array(a, 0, idx)
  ensures k !in set_of_array(a, idx + 1, len)
{
  var lo := 0;
  var hi := len;

  while (hi != lo)
    invariant sorted_array_with_content(a, len, C)
    // what we actually care about
    invariant 0 <= lo <= hi <= len <= a.length
    invariant hi == len || a[lo] == k || lt(k, a[hi])
    invariant 0 < lo ==> lt(a[lo - 1], k)
    invariant hi < len - 1 ==> lt(k, a[hi + 1])
  {
    var m := (hi + lo) / 2;
    var cmp: Int;
    cmp := compare(k, a[m]);
    if (cmp < 0) {
      hi := m;      // look in first half
    } else if (cmp > 0) {
      lo := m+1;    // look in second half
    } else {
      // found it
      hi := m;
      lo := m;
    }
  }

  idx := lo;

  if (idx == len || lt(k, a[lo])) {
    found := false;
  } else {
    found := true;
  }

  // prove k !in set_of_array(a, 0, idx);
  not_in_sorted_seg(map_of_array(a), 0, idx, k);
  // prove k !in set_of_array(a, idx + 1, len);
  not_in_sorted_seg(map_of_array(a), idx + 1, len, k);
  // prove found == (k in C)
  set_of_map_split(map_of_array(a), 0, idx, len);
}

// Given a sorted array segment `a[0..len]`,
// insert `k` into `a[0..len+1]` while preserving sortedness.
// If `k` is already contained in `a[0..len]`, then do not modify `a`.                                                       
procedure insert(a: Array<K>, k: K, len: Int, implicit ghost C: Set<K>)
  returns (new_len: Int)
  requires sorted_array_with_content(a, len, C)
  requires len < a.length
  ensures sorted_array_with_content(a, new_len, C ++ {k})
  ensures k in C ==> new_len == len
  ensures k !in C ==> new_len == len + 1
{
  // find position for insertion
  var i: Int, found: Bool;
  found, i := find(a, len, k);
  
  // k already in C?
  if (found) return len;

  // shift array entries a[i..len] by 1 entry to the right 
  var ghost m := map_of_array(a);
  shift(a, i, i + 1, len - i);

  // prove C == set_of_array(a, 0, i) ++ set_of_array(a, i + 1, len + 1);
  set_of_map_split(m, 0, i, len);
  set_of_map_equal(m, map_of_array(a), 0, 0, i);
  set_of_map_equal(m, map_of_array(a), i, i + 1, len - i);

  var ghost m1 := map_of_array(a);
  
  a[i] := k;

  // prove C == set_of_array(a, 0, i) ++ {k} ++ set_of_array(a, i + 1, len + 1)
  pure assert map_of_array(a) == m1[i := k];
  frame_set_of_map(m1, 0, i);
  frame_set_of_map(m1, i + 1, len + 1);
  set_of_map_split(map_of_array(a), 0, i, len + 1);

  return len + 1;
}

procedure delete(a: Array<K>, k: K, len: Int, implicit ghost C: Set<K>)
 returns (new_len: Int)
  requires sorted_array_with_content(a, len, C)
  ensures sorted_array_with_content(a, new_len, C -- {k})
  ensures k !in C ==> new_len == len
  ensures k in C ==> new_len == len - 1
{
  // find position for insertion
  var i: Int, found: Bool;
  found, i := find(a, len, k);
  
  // k !in C?
  if (!found) return len;

  // shift array entries a[i+1..len] by 1 entry to the left 
  var ghost m := map_of_array(a);
  shift(a, i + 1, i, len - (i + 1));

  // prove C -- {k} == set_of_array(a, 0, i - 1) ++ set_of_array(a, i - 1, len);
  if (i > 0) {
    set_of_map_split(m, 0, i, len);
  }
  
  set_of_map_equal(m, map_of_array(a), 0, 0, i);
  set_of_map_equal(m, map_of_array(a), i + 1, i, len - (i + 1));

  not_in_sorted_seg(m, 0, i - 1, k);
  not_in_sorted_seg(m, i + 1, len, k);
  
  set_of_map_split(map_of_array(a), 0, i, len - 1);
  
  return len - 1;
}

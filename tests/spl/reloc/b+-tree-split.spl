include "b+-tree.spl";

/** These extra lemmas need to go into ReLoC

// This lemma depends on the flow domain being a function domain -- generalize?
lemma lemma_pred(k: K, x: Node, Ix: Interface, I2: Interface, I: Interface)
  returns (y: Node, Iy: Interface, I3: Interface)
  requires Gr(I2)
  requires intComp(Ix, I2) == I && Ix.FP == {x}
  requires Ix.inf[x].ks[k] > 0 && I.inf[x].ks[k] == 0
  ensures N(y, Iy) &*& Gr(I3)
  ensures I2 == intComp(Iy, I3)
  ensures Iy.inf[y].ks[k] > 0 && Iy.fm[y][x].ks[k] > 0

// Lemma that all keys in a node come from its parent
lemma lemma_inheritance(k: K, k1: K, p: Node, Ip: Interface, c: Node, Ic: Interface,
                        I2: Interface, I: Interface)
  requires N(p, Ip) &*& N(c, Ic) &*& Gr(I2)
  requires I == intComp(Ip, intComp(Ic, I2)) &*& globalInt(I)
  requires Ic.inf[c].ks[k] >= 1 && c != r
  requires Ip.inf[p].ks[k1] >= 1 && Ip.fm[p][c].ks[k1] >= 1
  ensures N(p, Ip) &*& N(c, Ic) &*& Gr(I2)
  ensures Ip.inf[p].ks[k] >= 1 && Ip.fm[p][c].ks[k] >= 1
{
  lemma_intro_conj_2(Ip, I2);
  var I3 := lemma_Gr_comp(Ip, I2);
  var y, Iy, I4 := lemma_pred(k, c, Ic, I3, I);
  if (y != p) {
    var I5 := lemma_disj_fp(Iy, I4, Ip, I2);
    lemma_conc(c, Ic);
    lemma_conc(p, Ip);
    lemma_conc(y, Iy);
    lemma_inf_geq(c, Ic, p, Ip, y, Iy, intComp(Ic, intComp(Ip, Iy)));

    pure assert false;
  } else {
    lemma_disj_eq(Iy, I4, Ip, I2);
  }
}
 */

// Lemmas to calculate/define new interfaces of nodes
pure function fm_of_node(x: Node, kys: Map<Int, K>, ps: Map<Int, Node>, lenn: Int, i: Int)
  returns (f: Map<Node, Map<Node, FlowDom>>)
  // TODO need two of each otherwise not instantiated
  ensures forall n: Node, n1: Node, k: K ::
    ps[0] == null ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] == null ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: K ::
    ps[0] != null && i < 0 ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i < 0 ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: K ::
    ps[0] != null && i >= 0 && n != x ==> f[n][n1].ks[k] == 0
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n != x ==> f[n][n1].pc == 0
  ensures forall n: Node, n1: Node, k: K ::
    ps[0] != null && i >= 0 && n in {x} && n1 != ps[i]
    // TODO why not known?    (domEq(f[n][n1], fm_of_node(x, kys, ps, lenn, i-1)[n][n1]) == true)
    ==> f[n][n1].ks[k] == fm_of_node(x, kys, ps, lenn, i-1)[n][n1].ks[k]
    @(matching f[n][n1].ks[k] yields fm_of_node(x, kys, ps, lenn, i-1)[n][n1].ks[k])
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n in {x} && n1 != ps[i]
    ==> f[n][n1].pc == fm_of_node(x, kys, ps, lenn, i-1)[n][n1].pc
    @(matching f[n][n1].pc yields fm_of_node(x, kys, ps, lenn, i-1)[n][n1].pc)
  ensures forall n: Node, n1: Node, k: K ::
    ps[0] != null && i >= 0 && n in {x} && n1 in {ps[i]}
    // TODO  (f[n][n1].ks[k] == ((i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i])) ? 1 : 0)
    ==>
    (f[n][n1].ks[k] == 1 && (i <= 0 || le(kys[i-1], k)) && (i >= lenn || lt(k, kys[i]))
      || f[n][n1].ks[k] == 0 && !((i <= 0 || le(kys[i-1], k)) && (i >= lenn || lt(k, kys[i]))))
  ensures forall n: Node, n1: Node ::
    ps[0] != null && i >= 0 && n in {x} && n1 in {ps[i]}
    ==> f[n][n1].pc == 1

/* TODO issue #29
{
  i <= 0 ?
    { n: Node :: { n1: Node :: domZero() } }
    : { n: Node :: n != x ? { n1: Node :: domZero() } :
        { n1: Node :: n1 == ps[i] ?
          fd({ k: K :: (i <= 0 || kys[i-1] <= k) && (i >= lenn || k < kys[i]) ? 1 : 0 })
          : fm_of_node(x, kys, ps, lenn, i-1)[n][n1] } }
} */

pure function fpo_of_node(x: Node, kys: Map<Int, K>, ps: Map<Int, Node>, lenn: Int, i: Int)
  returns (X: Set<Node>)
  requires forall i: Int :: 0 <= i <= lenn ==> x != ps[i]
  ensures x !in X
{
  i < 0 || ps[0] == null ? {} : fpo_of_node(x, kys, ps, lenn, i-1) ++ {ps[i]}
}

pure function inf_of_node(x: Node, l: K, u: K)
  returns (d: Map<Node, FlowDom>)
  ensures forall n: Node, k: K :: n in {x} ==> (d[n].ks[k] == 1 && le(l, k) && lt(k, u))
    || (d[n].ks[k] == 0 && !(le(l, k) && lt(k, u)))
  ensures forall n: Node, k: K :: n !in {x} ==> d[n].ks[k] == 0
  ensures forall n: Node :: n in {x} ==> (d[n].pc == 1 && lt(l, u)) || (d[n].pc == 0 && !lt(l, u))
  ensures forall n: Node :: n !in {x} ==> d[n].pc == 0


lemma lemma_int_of_node(x: Node, i: Int)
/* TODO why isn't domLeq defn getting instantiated?
  ensures forall n: Node, n1: Node :: domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1])
  @(matching domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1]) yields
  known(domLeq(domZero(), fm_of_node(x, x.keys, x.ptrs, x.len, i)[n][n1])))
 */
  requires hrepSpatial(x)
  requires 0 <= x.len
  requires forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x != x.ptrs[i]
  requires forall i: Int, j: Int :: 0 <= i < j < x.len ==> lt(x.keys[i], x.keys[j])
  requires forall i: Int, j: Int :: x.ptrs[0] != null && 0 <= i < j <= x.len ==> x.ptrs[i] != x.ptrs[j]
  ensures hrepSpatial(x) &*& unchanged(x)
  // TODO after fixing issue #24, use domEq, domLeq etc below
  // All fm values are >= 0
  ensures forall n: Node, n1: Node, k: K ::
    domZero().ks[k] <= fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k]
    && 0 <= fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc
    // TODO write 0 instead of domZero().ks[k] and remove these term gens?
    @(matching domZero().ks[k] yields fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k])
    @(matching fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] yields domZero().ks[k])
  // fm from nodes != x are 0
  ensures forall n: Node, n1: Node, k: K :: n !in {x}
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
      && fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 0
  // fm to nodes !in FPo are 0
  ensures forall n: Node, n1: Node, k: K :: n1 !in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
      && fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 0
  ensures x !in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
  // helper invariant for next property
  ensures forall n: Node, n1: Node, k: K :: n in {x} && i < x.len && le(x.keys[i], k)
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
  // fm to different nodes are disjoint
  ensures forall n: Node, n1: Node, n2: Node, k: K :: n !in {x} || n1 == n2 || i > x.len
    || fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
    || fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n2].ks[k] == 0
  // fm satisfies hrepG
  ensures forall n: Node, n1: Node, j: Int, k: K ::
    x.ptrs[0] != null && n in {x} && n1 in {x.ptrs[j]} && 0 <= j <= i <= x.len ==>
          n1 in fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, i)
          && (fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 1
             && ((j <= 0 || le(x.keys[j-1], k)) && (j >= x.len || lt(k, x.keys[j])))
           || fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] == 0
             && !((j <= 0 || le(x.keys[j-1], k)) && (j >= x.len || lt(k, x.keys[j]))))
          @(matching x.ptrs[j] yields x.keys[j-1]) // TODO remove if not needed
          @(matching x.ptrs[j] yields x.keys[j])
  ensures forall n: Node, n1: Node, j: Int ::
    x.ptrs[0] != null && {n} == {x} && n1 in {x.ptrs[j]} && 0 <= j <= i <= x.len
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 1
    // TODO simplification removes n -- disable?
  // contents are within range
  requires x.len != 0 ==> le(x.rangeLb, x.keys[0]) && lt(x.keys[x.len-1], x.rangeUb)
  ensures forall k: K :: x.ptrs[0] == null && i <= x.len && k in set_of_map(x.keys.map, 0, i)
    ==> inf_of_node(x, x.rangeLb, x.rangeUb)[x].ks[k] >= 1
  // edgeset != {} ==> pc >= 1
  ensures forall n: Node, n1: Node, k: K ::
    fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].ks[k] >= 1
    ==> fm_of_node(x, x.keys.map, x.ptrs.map, x.len, i)[n][n1].pc == 1
{
  if (i >= 0) {
    lemma_int_of_node(x, i-1);
    if (i > 0)
      extend_right(x.keys.map, 0, i-1);
  }
}


lemma lemma_calculate_int(x: Node)
  returns (Ix: Interface)
  requires hrepSpatial(x)
  requires 0 <= x.len && x.len < 2*B && x.keys.length == 2*B && x.ptrs.length == 2*B
  requires forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x != x.ptrs[i] && x.ptrs[i] != null
  requires forall i: Int, j: Int :: 0 <= i < j < x.len ==> lt(x.keys[i], x.keys[j])
  requires forall i: Int, j: Int :: x.ptrs[0] != null && 0 <= i < j <= x.len ==> x.ptrs[i] != x.ptrs[j]
  requires x.len != 0 ==> le(x.rangeLb, x.keys[0]) && lt(x.keys[x.len-1], x.rangeUb)
  ensures hrep(x, Ix) &*& unchanged(x)
  ensures Ix != intUndef && intValid(Ix) == true
{
  // TODO use assignment here instead
  pure assume Ix != intUndef
    && (Ix.na.contents == set_of_map(x.keys.map, 0, x.len) && x.ptrs[0] == null
       || Ix.na.contents == {} && x.ptrs[0] != null)
    && Ix.FP == {x}
    && Ix.inf == inf_of_node(x, x.rangeLb, x.rangeUb)
    && Ix.fm == fm_of_node(x, x.keys.map, x.ptrs.map, x.len, x.len)
    && Ix.FPo == fpo_of_node(x, x.keys.map, x.ptrs.map, x.len, x.len);    
  lemma_int_of_node(x, x.len);
  lemma_int_valid_fold(Ix);
}


/** split */


procedure split_node(p: Node, Ip: Interface, c: Node, Ic: Interface, c_idx: Int,
                     n: Node, In: Interface, Ipcn: Interface)
  returns (Ip1: Interface, Ic1: Interface, In1: Interface, Ipcn1: Interface)
  requires hrep(p, Ip) &*& hrep(c, Ic) &*& (acc(n) &*& acc(n.ptrs) &*& acc(n.keys))
  requires In.FP == {n} && domEq(In.inf[n], domZero()) == true && In.FPo == {}
  requires intValid(Ip) == true && intValid(Ic) == true && intValid(In) == true
  requires intComp(Ip, intComp(Ic, In)) == Ipcn && intValid(Ipcn) == true
  requires n.keys.length == 2*B && n.ptrs.length == 2*B
  requires 0 < p.len < p.keys.length - 1 && c.len == 2 * B - 1
  requires p.ptrs[0] != null  // p is an internal node. TODO?
  requires 0 <= c_idx < p.len && p.ptrs[c_idx] == c
  // Consequence of acyclicity
  requires domEq(Ic.fm[c][p], domZero()) == true
  // These follow from lemma_inheritance
  requires forall k: K :: Ic.inf[c].ks[k] == 1 ==> Ip.inf[p].ks[k] == 1 && Ip.fm[p][c].ks[k] == 1
  requires (c_idx == 0 || p.keys[c_idx-1] == c.rangeLb) && c.rangeUb == p.keys[c_idx]
  // TODO create and mark node - inflow will be 0, so nothing else can point to it
  requires forall i: Int :: 0 <= i <= p.len ==> p.ptrs[i] != n
  requires n !in Ic.FPo

  ensures hrep(p, Ip1) &*& hrep(c, Ic1) &*& hrep(n, In1)
  ensures intValid(Ip1) == true && intValid(Ic1) == true && intValid(In1) == true
  ensures intComp(Ip1, intComp(Ic1, In1)) == Ipcn1 && intEq(Ipcn, Ipcn1) == true
  ensures Ipcn.na.contents == Ipcn1.na.contents
{
  var m := (c.len / 2) + 1;
  var k := c.keys[m - 1];

  // Create a new node n
  n.rangeLb := k;
  n.rangeUb := c.rangeUb;

  if (c.ptrs[0] == null) {  // Leaf
    arr_copy(c.keys, n.keys, m - 1, 0, c.len - m + 1);
    n.ptrs[0] := null;
    n.len := m;
  } else {  // Internal node
    arr_copy(c.keys, n.keys, m, 0, c.len - m);
    arr_copy_node(c.ptrs, n.ptrs, m, 0, c.len - m + 1);
    n.len := m - 1;
  }
  c.len := m - 1;
  c.rangeUb := k;

  var old_p_keys := p.keys.map;
  // Shift keys of p and insert link to n
  var k_idx, new_len := arr_insert(p.keys, k, p.len);

  // Prove c_idx == k_idx
  pure assert Ic.inf[c].ks[k] == 1 && Ip.fm[p][c].ks[k] == 1 && c == p.ptrs[c_idx];
  pure assert Ic.inf[c].ks[c.keys[0]] == 1 && Ip.fm[p][c].ks[c.keys[0]] == 1 && c == p.ptrs[c_idx];
  pure assert k_idx == c_idx;

  arr_shift_node(p.ptrs, k_idx + 1, k_idx + 2, p.len - k_idx);
  p.ptrs[k_idx + 1] := n;
  p.len := new_len;


  // Show that nodes are good with new interfaces
  lemma_int_valid_unfold(Ip); // may not be needed here
  pure assert Ic.inf[c].ks[k] == 1 && Ip.inf[p].ks[k] == 1;  // To show that p.rangeLb <= k
  Ip1 := lemma_calculate_int(p);
  Ic1 := lemma_calculate_int(c);
  In1 := lemma_calculate_int(n);

  // Show that In1's inflow is correct
  pure assert n !in Ic1.FPo;
  lemma_int_valid_unfold(Ic1);
  lemma_int_valid_unfold(In1);
  pure assert Ic1.fm[c][n].pc == 0 && (forall k: K :: Ic1.fm[c][n].ks[k] == 0);
  pure assert domEq(domMult(Ic1.inf[c], Ic1.fm[c][n]), domZero()) == true;
  pure assert p.keys[k_idx] == k && n.rangeLb == k && p.keys[k_idx + 1] == n.rangeUb;
  pure assert forall k: K :: Ip1.inf[p].ks[k] * Ip1.fm[p][n].ks[k] <= In1.inf[n].ks[k];
  pure assert Ip1.inf[p].pc * Ip1.fm[p][n].pc <= In1.inf[n].pc;
  pure assert domLeq(domMult(Ip1.inf[p], Ip1.fm[p][n]), In1.inf[n]) == true;
  
  // Compose the new interfaces
  lemma_int_valid_unfold(In);
  lemma_int_comp_unfold_3(p, Ip, c, Ic, n, In, Ipcn);
  pure assert c == p.ptrs[c_idx] && old_p_keys[c_idx - 1] == p.keys[c_idx - 1];
  pure assert Ip1.fm[p][c].ks[c.keys[0]] == 1;

  pure assert domMult(Ip1.inf[p], Ip1.fm[p][c]).pc <= Ic1.inf[c].pc
    && (forall k: K :: domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] <= Ic1.inf[c].ks[k]
    @(matching domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] yields domMult(Ip.inf[p], Ip.fm[p][c]).ks[k]));

  pure assert domLeq(domMult(Ip1.inf[p], Ip1.fm[p][c]), Ic1.inf[c]) == true;

  // TODO CONTINUE, show this to allow next lemma
  // lemma_acyclic_2(p, I)
  pure assume domEq(Ic1.fm[c][p], domZero()) == true;
  pure assume domEq(In1.fm[n][p], domZero()) == true && domEq(In1.fm[n][c], domZero()) == true;
  Ipcn1 := lemma_int_comp_fold_3(p, Ip1, c, Ic1, n, In1);
  // Show that interface of region is contextually extended
  pure assume false;
}

/*
procedure foo(a: Array<Int>, lenn: Int, k: Int, u: Int)
  returns (idx: Int, new_len: Int)
  requires lenn < a.length
  requires m[lenn-1] < u
  ensures m1[new_len-1] < u
{
  new_len := lenn + 1;
  m1 := map_shift(m, idx, idx + 1, lenn - idx);
}
 */

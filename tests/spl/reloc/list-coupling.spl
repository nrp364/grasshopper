/** Linked list implementation of the lock coupling template for linearizable dictionaries. */

options "-abspreds -simplearrays -propreads"

include "flows.spl"
include "array_util.spl"


/** Flow and node domain definitions */

datatype FlowDom = fd(ks: Map<K, Int>)

/*
pure predicate domEq(p1: FlowDom, p2: FlowDom) {
  p1.ks == p2.ks && p1.ir == p2.ir
  //  (forall k: K :: p1.ks[k] == p2.ks[k]
  //   @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
  //    && (forall k: K :: p1.ir[k] == p2.ir[k]
  //     @(matching p1.ir[k] yields p2.ir[k]) @(matching p2.ir[k] yields p1.ir[k]))

}
 */

pure predicate domLeq(p1: FlowDom, p2: FlowDom) {
  (forall k: K :: p1.ks[k] <= p2.ks[k])
    //@(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
}

pure function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures forall k: K :: p.ks[k] == p1.ks[k] + p2.ks[k]

pure function domMult(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
  ensures forall k: K :: p.ks[k] == p1.ks[k] * p2.ks[k]

pure function domZero() returns(p: FlowDom)
  ensures forall k: K :: p.ks[k] == 0


datatype NodeDom = nd(contents: Set<K>);

pure predicate ndLeq(a1: NodeDom, a2: NodeDom) {
  (forall k: K :: k in a1.contents ==> k in a2.contents)
}

pure function ndJoin(a1: NodeDom, a2: NodeDom) returns (a: NodeDom) {
  nd(a1.contents ++ a2.contents)
}

pure function ndBot() returns (a: NodeDom)
{
  nd({})
}


/** Definition of a node */

struct Node {
  var data: K;
  var next: Node;
}

define unchanged(x) {
  x.data == old(x.data) && x.next == old(x.next)
}


/** Definition of heap representation, hrep */

define hrepSpatial(x) {
  acc(x)
}

define heapGood(x) {
  x.next != x
}

function fmap(x: Node) returns (res: Map<Node, Map<Node, FlowDom>>)
{
  { n: Node :: { n1: Node ::
    n != x ? domZero :
    (n1 != x.next ? domZero :
    fd({ k: K :: lt(n.data, k) ? 1 : 0 }))
    }
  }    
}

define hrep(x, I) {
  hrepSpatial(x) &*& heapGood(x) &*& I.FP == {x} &*& I.na.contents == {x.data}
  &*& (forall k: K :: I.inf[x].ks[k] == 1 || I.inf[x].ks[k] == 0)
  &*& (forall k: K :: le(x.data, k) ==> I.inf[x].ks[k] == 1)
  &*& I.fm == fmap(x)
  &*& (x.next == null && x.data == top && I.FPo == {}
     || x.next != null && x.data != top && I.FPo == {x.next})
}

// The good condition
define nu(x, I) {
  // Contents subsetof keyset
  (forall k: K :: k in I.na.contents ==> I.inf[x].ks[k] >= 1)
  && (forall k: K, y: Node :: k !in I.na.contents || I.fm[x][y].ks[k] == 0)
  // Edgesets are disjoint
  && (forall k: K, y: Node, z: Node :: y == z
  || I.fm[x][y].ks[k] == 0 || I.fm[x][z].ks[k] == 0)
}


/** Begin programs */


/** findNext */
procedure findNext(x: Node, k: K, Ix: Interface)
  returns (n: Node)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  ensures hrep(x, Ix)
  ensures n != null ==> Ix.fm[x][n].ks[k] >= 1
  ensures n == null ==> (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
{
  lemma_int_valid_unfold(x, Ix);
  if (x.next == null) {
    return null;
  } else {
    if (le(k, x.data)) {
      return null;
    } else {
      return x.next;
    }
  }
}


/** member */
procedure member(x: Node, k: K, Ix: Interface)
  returns (res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures (Ix1.na.contents == Ix.na.contents && (res == k in Ix.na.contents))
{
  if (k == x.data)
    return true, Ix;
  else
    return false, Ix;
}


/** insert */
procedure insert(p: Node, n: Node, m: Node, k: K, Ip: Interface, In: Interface, Im: Interface,
    Ipnm: Interface)
  returns (res: Bool, Ip1: Interface, In1: Interface, Im1: Interface, Ipnm1: Interface)
  requires lt(bottom, k) && lt(k, top) // added
  requires forall k1 in In.na.contents :: lt(k, k1); // added
  requires hrep(p, Ip) &*& hrep(n, In) &*& acc(m)
  requires intValid(Ip) == true &*& intValid(In) == true &*& intValid(Im) == true 
  requires Ipnm == intComp(Ip, intComp(In, Im)) &*& intValid(Ipnm)
  requires Im.FP == {m} && Im.FPo == {} && (forall k: K, y: Node :: Im.inf[y].ks[k] == 0)
  requires (forall k: K, x: Node, y: Node :: Im.fm[x][y].ks[k] == 0)
  requires Ip.fm[p][n].ks[k] == 1
  requires In.inf[n].ks[k] == 1 && (forall y: Node :: In.fm[n][y].ks[k] == 0)
  ensures hrep(p, Ip1) &*& hrep(n, In1) &*& hrep(m, Im1)
  ensures intValid(Ip1) == true &*& intValid(In1) == true &*& intValid(Im1) == true
  ensures Ipnm1 == intComp(Ip1, intComp(In1, Im1))
  ensures intEq(Ipnm, Ipnm1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures (Ipnm1.na.contents == Ipnm.na.contents ++ {k} && (res == k !in Ipnm.na.contents))
{
  // Actual implementation
  m.data := k;
  m.next := n;
  p.next := m;  
  res := true;

  // Proof - not pretty but almost all of this is just manual expansion of definitions
  lemma_int_valid_unfold(p, Ip);
  lemma_int_valid_unfold(n, In);
  lemma_int_valid_unfold(m, Im);
  lemma_int_valid_unfold_I(Ipnm);

  // Prove precondition of lemma_acyclic_2
  pure assert intComp(intComp(Ip, In), Im) != intUndef;

  pure assert intValid(intComp(Ip, In)) == true;
  pure assert !domEq(domMult(Ip.inf[p], Ip.fm[p][n]), domZero) with {
    pure assert Ip.inf[p].ks[k] * Ip.fm[p][n].ks[k] == 1;
    pure assert domMult(Ip.inf[p], Ip.fm[p][n]).ks[k] == 1;
  }

  lemma_acyclic_2(p, Ip, n, In);

  // Prove precondition of lemma_int_comp_unfold_3
  pure assert domEq(In.fm[n][p], domZero()) with {
    pure assert forall k: K :: In.fm[n][p].ks[k] == 0;
  }

  lemma_int_comp_unfold_3(p, Ip, n, In, m, Im, Ipnm);

  pure assert Im.na.contents == {} with {
    pure assert forall k: K :: k !in Im.na.contents with {
      pure assert Im.inf[m].ks[k] == 0;
    }
  }

  
  // Define Ip1
  var ppfm := { x: Node :: x == m ? fd({ k: K :: lt(p.data, k) ? 1 : 0 }) : domZero };
  var pfm := { x: Node :: x == p ? ppfm : { y: Node :: domZero } };
  Ip1 := int(Ip.inf, Ip.na, fmap(p), {p}, {m});

  lemma_int_valid_fold(p, Ip1);

  // Define Im1
  var minf1 := { n1: Node :: n1 == m ? fd({ k1: K :: lt(p.data, k1) ? 1 : 0}): domZero };
  Im1 := int(minf1, nd({k}), fmap(m), {m}, {n});

  lemma_int_valid_fold(m, Im1);

  // Define In1
  var ninf1 := { n1: Node :: n1 == n ? fd({ k1: K :: In.inf[n].ks[k1] == 1 && le(k1, p.data) || lt(k, k1) ? 1 : 0}) : domZero };

  //var ninf1 := { n1: Node :: n1 == n ? fd({ k1: K :: lt(k, k1) ? 1 : 0}) : domZero };
  In1 := int(ninf1, In.na, fmap(n), In.FP, In.FPo);

  // Prove some properties for precondition of lemma_int_valid_fold(n, In1)
  pure assert forall n1: Node, n2: Node, k: K :: old(fmap(n)[n1][n2].ks[k]) == In.fm[n1][n2].ks[k];
  pure assert forall n1: Node, n2: Node, k: K :: In.fm[n1][n2].ks[k] == In1.fm[n1][n2].ks[k];
  
  // Prove precondition of lemma_int_valid_fold(n, In1);
  pure assert forall n: Node, n1: Node :: n1 !in In1.FPo ==> domEq(In1.fm[n][n1], domZero());
  pure assert forall n: Node :: n !in In1.FP ==> domEq(In1.inf[n], domZero());
  //pure assert forall n: Node, k: K :: domZero.ks[k] <= In.inf[n].ks[k];
  pure assert forall n1: Node, k1: K :: domZero.ks[k1] <= In1.inf[n1].ks[k1] with {
    pure assert n1 != n ==> In1.inf[n1].ks[k1] == domZero.ks[k1];
    pure assert n1 == n && (In.inf[n1].ks[k1] == 1 && le(k1, p.data) || lt(k, k1)) ==> In1.inf[n1].ks[k1] == 1;
    pure assert n1 == n && !(In.inf[n1].ks[k1] == 1 && le(k1, p.data) || lt(k, k1)) ==> In1.inf[n1].ks[k1] == 0;
    //pure assert domZero.ks[k1] <= In1.inf[n1].ks[k1];
  }

  lemma_int_valid_fold(n, In1);
  
  //pure assert In1.FP == {n} && In1.na.contents == {n.data};

  // Prove hrep(n, In1)
  pure assert (forall k1: K :: In1.inf[n].ks[k1] == 1 || In1.inf[n].ks[k1] == 0) with {
    pure assert (In.inf[n].ks[k1] == 1 && le(k1, p.data) || lt(k, k1)) ==> In1.inf[n].ks[k1] == 1;
    pure assert !(In.inf[n].ks[k1] == 1 && le(k1, p.data) || lt(k, k1)) ==> In1.inf[n].ks[k1] == 0;    
  }
  
  assert hrep(n, In1) &*& acc(p) &*& acc(m);
  //assert hrep(m, Im1) &*& acc(p) &*& acc(n);
  assert hrep(n, In1) &*& hrep(p, Ip1) &*& hrep(m, Im1);

  // Prove precondition of lemma_int_comp_3_fold(p, Ip1, n, In1, m, Im1);
  pure assert domMult(Ip1.inf[p], Ip1.fm[p][n]) == domZero with {
    pure assert forall k1: K :: domMult(Ip1.inf[p], Ip1.fm[p][n]).ks[k1] == domZero.ks[k1] with {
      pure assert Ip1.inf[p].ks[k1] * Ip1.fm[p][n].ks[k1] == domZero.ks[k1];
    }
  }

  pure assert domMult(Ip1.inf[p], Ip1.fm[p][m]) == pfm[p][m] with {
    pure assert forall k1: K :: domMult(Ip1.inf[p], Ip1.fm[p][m]).ks[k1] == pfm[p][m].ks[k1] with {
      pure assert Ip1.inf[p].ks[k1] * Ip1.fm[p][m].ks[k1] == pfm[p][m].ks[k1]; 
    }
  }

  pure assert domLeq(domMult(Ip1.inf[p], Ip1.fm[p][m]), Im1.inf[m]) == true;

  
  pure assert In1.fm[n][m] == domZero with {
    pure assert forall k1: K :: In1.fm[n][m].ks[k1] == domZero.ks[k1] with {
      pure assert Im.inf[m].ks[top] ==
        domPlus(Ipnm.inf[m], domPlus(domMult(Ip.inf[p], Ip.fm[p][m]), domMult(In.inf[n], In.fm[n][m]))).ks[top]
      && Im.inf[m].ks[top] ==
        Ipnm.inf[m].ks[top] + domPlus(domMult(Ip.inf[p], Ip.fm[p][m]), domMult(In.inf[n], In.fm[n][m])).ks[top]
      && Im.inf[m].ks[top] ==
        Ipnm.inf[m].ks[top] + (domMult(Ip.inf[p], Ip.fm[p][m]).ks[top] + domMult(In.inf[n], In.fm[n][m]).ks[top])
      && Ipnm.inf[m].ks[top] + (Ip.inf[p].ks[top] * Ip.fm[p][m].ks[top] + In.inf[n].ks[top] * In.fm[n][m].ks[top]) <= Im.inf[m].ks[top]
      && In1.inf[n].ks[k1] * In1.fm[n][m].ks[k1] == domZero.ks[k1]; 
    }
  }
  
  pure assert domEq(Im1.fm[m][p], domZero()); // just checking
  
  pure assert domEq(In1.fm[n][p], domZero()); // just checking
  
  pure assert domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])) == domMult(Im1.inf[m], Im1.fm[m][n]) with {
    pure assert forall k: K :: domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])).ks[k] == domMult(Im1.inf[m], Im1.fm[m][n]).ks[k] with {
      pure assert Ip1.inf[p].ks[k] * Ip1.fm[p][n].ks[k] == 0;
      pure assert domMult(Ip1.inf[p], Ip1.fm[p][n]).ks[k] == 0;
      pure assert domMult(Ip1.inf[p], Ip1.fm[p][n]).ks[k] + domMult(Im1.inf[m], Im1.fm[m][n]).ks[k] ==
        domMult(Im1.inf[m], Im1.fm[m][n]).ks[k]; 
    }
  }
  
  pure assert domLeq(domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])), In1.inf[n]) == true with {
    pure assert forall k: K :: domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])).ks[k] <= In1.inf[n].ks[k] with {
      pure assert Im1.inf[m].ks[k] * Im1.fm[m][n].ks[k] <= In1.inf[n].ks[k];
      pure assert domMult(Ip1.inf[p], Ip1.fm[p][n]).ks[k] + domMult(Im1.inf[m], Im1.fm[m][n]).ks[k] <= In1.inf[n].ks[k];
    }

  }
  
  Ipnm1 := lemma_int_comp_fold_3(p, Ip1, m, Im1, n, In1);
  lemma_int_comp_unfold_3(p, Ip1, m, Im1, n, In1, Ipnm1);
  lemma_int_valid_unfold_I(Ipnm1);
  

  
  // Prove that old and new inflows of composite interfaces are equal
  pure assert forall k: K :: Ipnm1.inf[p].ks[k] == Ipnm.inf[p].ks[k];

  pure assert forall k: K :: Ipnm1.inf[m].ks[k] == 0 with {
    pure assert Im1.inf[m] == domPlus(Ipnm1.inf[m], domMult(Ip1.inf[p], Ip1.fm[p][m]));
    pure assert Im1.inf[m].ks[k] == domPlus(Ipnm1.inf[m], domMult(Ip1.inf[p], Ip1.fm[p][m])).ks[k];
    pure assert Im1.inf[m].ks[k] == Ipnm1.inf[m].ks[k] + domMult(Ip1.inf[p], Ip1.fm[p][m]).ks[k];
    pure assert Im1.inf[m].ks[k] == Ipnm1.inf[m].ks[k] + Ip1.inf[p].ks[k] * Ip1.fm[p][m].ks[k];
  }

  pure assert forall k: K :: Ipnm.inf[m].ks[k] == 0 with {
    pure assert Im.inf[m].ks[k] == 0;

    pure assert domEq(Im.inf[m], domPlus(Ipnm.inf[m], domPlus(domMult(Ip.inf[p], Ip.fm[p][m]), domMult(In.inf[n], In.fm[n][m]))))
    && Im.inf[m].ks[k] == domPlus(Ipnm.inf[m], domPlus(domMult(Ip.inf[p], Ip.fm[p][m]), domMult(In.inf[n], In.fm[n][m]))).ks[k]
    && Im.inf[m].ks[k] == Ipnm.inf[m].ks[k] + domPlus(domMult(Ip.inf[p], Ip.fm[p][m]), domMult(In.inf[n], In.fm[n][m])).ks[k]
    && Im.inf[m].ks[k] == Ipnm.inf[m].ks[k] + (domMult(Ip.inf[p], Ip.fm[p][m]).ks[k] + domMult(In.inf[n], In.fm[n][m]).ks[k])
    && Im.inf[m].ks[k] == Ipnm.inf[m].ks[k] + (Ip.inf[p].ks[k] * Ip.fm[p][m].ks[k] + In.inf[n].ks[k] * In.fm[n][m].ks[k]);
  }

  pure assert forall x: Node :: Ipnm1.inf[x] == Ipnm.inf[x] with {
    pure assert forall k: K :: Ipnm1.inf[x].ks[k] == Ipnm.inf[x].ks[k] with {
      if (x != n && x != m && x != p) {
        pure assert x !in Ipnm1.FP;
        pure assert x !in Ipnm.FP;
        pure assert Ipnm1.inf[x].ks[k] == 0;
        pure assert Ipnm.inf[x].ks[k] == 0;
      } else {
        // Expand Ipnm1.inf[n].ks[k]
        pure assert In1.inf[n] == domPlus(Ipnm1.inf[n], domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])))
        && In1.inf[n].ks[k] == domPlus(Ipnm1.inf[n], domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n]))).ks[k]
        && In1.inf[n].ks[k] == Ipnm1.inf[n].ks[k] + domPlus(domMult(Ip1.inf[p], Ip1.fm[p][n]), domMult(Im1.inf[m], Im1.fm[m][n])).ks[k]
        && In1.inf[n].ks[k] == Ipnm1.inf[n].ks[k] + (domMult(Ip1.inf[p], Ip1.fm[p][n]).ks[k] + domMult(Im1.inf[m], Im1.fm[m][n]).ks[k])
        && In1.inf[n].ks[k] == Ipnm1.inf[n].ks[k] + (Ip1.inf[p].ks[k] * Ip1.fm[p][n].ks[k] + Im1.inf[m].ks[k] * Im1.fm[m][n].ks[k]);

        // Expand Ipnm1.inf[m]
        pure assert Im1.inf[m] == domPlus(Ipnm1.inf[m], domMult(Ip1.inf[p], Ip1.fm[p][m]))
        && Im1.inf[m].ks[k] == domPlus(Ipnm1.inf[m], domMult(Ip1.inf[p], Ip1.fm[p][m])).ks[k]
        && Im1.inf[m].ks[k] == Ipnm1.inf[m].ks[k] + domMult(Ip1.inf[p], Ip1.fm[p][m]).ks[k]
        && Im1.inf[m].ks[k] == Ipnm1.inf[m].ks[k] + Ip1.inf[p].ks[k] * Ip1.fm[p][m].ks[k];
    

        pure assert Im1.inf[m].ks[k] == Ipnm1.inf[m].ks[k] + Ip1.inf[p].ks[k] * Ip1.fm[p][m].ks[k];
   
        // Expand Ipnm.inf[n].ks[k]
        pure assert In.inf[n] == domPlus(Ipnm.inf[n], domMult(Ip.inf[p], Ip.fm[p][n]))
        && In.inf[n].ks[k] == Ipnm.inf[n].ks[k] + domMult(Ip.inf[p], Ip.fm[p][n]).ks[k]
        && In.inf[n].ks[k] == Ipnm.inf[n].ks[k] + Ip.inf[p].ks[k] * Ip.fm[p][n].ks[k]
        && Ipnm1.inf[n].ks[k] == Ipnm.inf[n].ks[k];


        pure assert Ipnm1.inf[p].ks[k] == Ipnm.inf[p].ks[k];
        pure assert Ipnm1.inf[m].ks[k] == 0;
        pure assert Ipnm.inf[m].ks[k] == 0;

      }
      pure assert Ipnm1.inf[x].ks[k] == Ipnm.inf[x].ks[k];
    }
  }

  // Prove that old and new flows are equal
  pure assert forall x: Node, y: Node :: domMult(Ipnm.inf[x], Ipnm.fm[x][y]) == domMult(Ipnm1.inf[x], Ipnm1.fm[x][y]) with {
    pure assert forall k: K :: domMult(Ipnm.inf[x], Ipnm.fm[x][y]).ks[k] == domMult(Ipnm1.inf[x], Ipnm1.fm[x][y]).ks[k] with {
      // x == m
      pure assert Ipnm.inf[m].ks[k] == 0;
      pure assert Ipnm1.inf[m].ks[k] == 0;

      // x == n
      pure assert Ipnm.inf[n].ks[k] == Ipnm1.inf[n].ks[k];
        
      pure assert domEq(Ipnm.fm[n][y], domPlus(In.fm[n][y], domMult(In.fm[n][m], Im.fm[m][y])))
      && Ipnm.fm[n][y].ks[k] == domPlus(In.fm[n][y], domMult(In.fm[n][m], Im.fm[m][y])).ks[k]
      && Ipnm.fm[n][y].ks[k] == In.fm[n][y].ks[k] + domMult(In.fm[n][m], Im.fm[m][y]).ks[k]
      && Ipnm.fm[n][y].ks[k] == In.fm[n][y].ks[k] + In.fm[n][m].ks[k] * Im.fm[m][y].ks[k]
      && Ipnm.fm[n][y].ks[k] == In.fm[n][y].ks[k];

      pure assert Ipnm1.fm[n][y].ks[k] == In1.fm[n][y].ks[k];
      pure assert Ipnm.inf[n].ks[k] * Ipnm.fm[n][y].ks[k] == Ipnm1.inf[n].ks[k] * Ipnm1.fm[n][y].ks[k];
      // x == p

      pure assert domEq(Ipnm.fm[p][y], domPlus(Ip.fm[p][y], domPlus(domMult(Ip.fm[p][m], Im.fm[m][y]), domMult(Ip.fm[p][n], Ipnm.fm[n][y]))))
      && Ipnm.fm[p][y].ks[k] == domPlus(Ip.fm[p][y], domPlus(domMult(Ip.fm[p][m], Im.fm[m][y]), domMult(Ip.fm[p][n], Ipnm.fm[n][y]))).ks[k]
      && Ipnm.fm[p][y].ks[k] == Ip.fm[p][y].ks[k] + domPlus(domMult(Ip.fm[p][m], Im.fm[m][y]), domMult(Ip.fm[p][n], Ipnm.fm[n][y])).ks[k]
      && Ipnm.fm[p][y].ks[k] == Ip.fm[p][y].ks[k] + (domMult(Ip.fm[p][m], Im.fm[m][y]).ks[k] + domMult(Ip.fm[p][n], Ipnm.fm[n][y]).ks[k])
      && Ipnm.fm[p][y].ks[k] == Ip.fm[p][y].ks[k] + (Ip.fm[p][m].ks[k] * Im.fm[m][y].ks[k] + Ip.fm[p][n].ks[k] * Ipnm.fm[n][y].ks[k]);


      pure assert domEq(Ipnm1.fm[m][y], domPlus(Im1.fm[m][y], domMult(Im1.fm[m][n], In1.fm[n][y])))
      && Ipnm1.fm[m][y].ks[k] == domPlus(Im1.fm[m][y], domMult(Im1.fm[m][n], In1.fm[n][y])).ks[k]
      && Ipnm1.fm[m][y].ks[k] == Im1.fm[m][y].ks[k] + domMult(Im1.fm[m][n], In1.fm[n][y]).ks[k]  
      && Ipnm1.fm[m][y].ks[k] == Im1.fm[m][y].ks[k] + Im1.fm[m][n].ks[k] * In1.fm[n][y].ks[k]; 
     
      pure assert domEq(Ipnm1.fm[p][y], domPlus(Ip1.fm[p][y], domPlus(domMult(Ip1.fm[p][n], In1.fm[n][y]), domMult(Ip1.fm[p][m], Ipnm1.fm[m][y]))))
      && Ipnm1.fm[p][y].ks[k] == domPlus(Ip1.fm[p][y], domPlus(domMult(Ip1.fm[p][n], In1.fm[n][y]), domMult(Ip1.fm[p][m], Ipnm1.fm[m][y]))).ks[k]
      && Ipnm1.fm[p][y].ks[k] == Ip1.fm[p][y].ks[k] + domPlus(domMult(Ip1.fm[p][n], In1.fm[n][y]), domMult(Ip1.fm[p][m], Ipnm1.fm[m][y])).ks[k]
      && Ipnm1.fm[p][y].ks[k] == Ip1.fm[p][y].ks[k] + (domMult(Ip1.fm[p][n], In1.fm[n][y]).ks[k] + domMult(Ip1.fm[p][m], Ipnm1.fm[m][y]).ks[k])
      && Ipnm1.fm[p][y].ks[k] == Ip1.fm[p][y].ks[k] + (Ip1.fm[p][n].ks[k] * In1.fm[n][y].ks[k] + Ip1.fm[p][m].ks[k] * Ipnm1.fm[m][y].ks[k]); 

      pure assert Ipnm.inf[p].ks[k] * Ipnm.fm[p][y].ks[k] == Ipnm1.inf[p].ks[k] * Ipnm1.fm[p][y].ks[k];
      
      
      pure assert Ipnm.inf[x].ks[k] * Ipnm.fm[x][y].ks[k] == Ipnm1.inf[x].ks[k] * Ipnm1.fm[x][y].ks[k];
    }
    
  }

  
  // Prove that footprints are equal (not needed?)
  pure assert Ipnm1.FP = Ipnm.FP;
  pure assert Ipnm1.FPo = Ipnm.FPo;
  
  // Prove that contents are correct
  pure assert Ipnm1.na.contents == {p.data} ++ ({k} ++ {n.data});
  
  pure assert Ipnm1.na.contents == Ipnm.na.contents ++ {k};
}

procedure int_of_node(p: Node, pinfLb: K) returns (Ip: Interface)
  requires acc(p) &*& p.next != p &*& lt(pinfLb, p.data) &*& p.next != null
  ensures hrep(p, Ip)
{
  var pinf := { x: Node :: x == p ? fd({ k: K :: lt(pinfLb, k) ? 1 : 0 }) : domZero };
  var ppfm := { x: Node :: x == p.next ? fd({ k: K :: 1 }) : domZero };
  var pfm := { x: Node :: x == p ? ppfm : { y: Node :: domZero } };
  Ip := int(pinf, nd({p.data}), pfm, {p}, {p.next});
}

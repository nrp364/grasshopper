procedure assign(x: Int, y: Int)
  requires x == 0 && y == x
  ensures x == 10 && y == 0
{
  x := 5;
  x := 10;
}

procedure assign2(x: Int, y: Int)
  requires x == 0 && y == 1
  ensures x == 10 && y == 5
{
  x := 5;
  y := 3;
  x := x;
  x := 10;
  y := 5;
}

struct Node {
  var next: Node;
}

procedure lookup_heap(x: Node) returns (y: Node)
  requires x.next |-> null
  ensures x.next |-> y
{
 y := x.next;
}

procedure lookup_heap2(x: Node, y: Node, z: Node)
  requires x.next |-> null &*& x == y &*& y == z
  ensures x.next |-> null &*& y == null
{
 y := y.next;
}

procedure assign_heap(x: Node)
  requires x.next |-> null
  ensures x.next |-> x
{
  x.next := x;
  x.next := null;
  x.next := x;
}

procedure assign_heap2(x: Node, y: Node)
  requires x.next |-> null &*& y.next |-> x
  ensures x.next |-> x &*& y.next |-> null
{
  x.next := x;
  x.next := null;
  y.next := null;
  x.next := x;
}

procedure assign_heap3(x: Node, y: Node)
  requires x.next |-> null &*& y == x
  ensures x.next |-> x
{
  y.next := x;
}

procedure assign_heap4(x: Node, y: Node)
  requires x.next |-> y &*& x.next.next |-> null
  ensures x.next |-> x &*& y.next |-> null
{
  y.next := x;
}

procedure assign_heap5(x: Node, y: Node)
  requires acc(x) &*& acc(x.next) &*& x.next == y
  ensures x.next |-> y &*& acc(y)
{}

procedure read_heap(x: Node) returns (y: Node)
  requires x.next |-> null
  ensures x.next |-> y
{
  y := x.next;
}

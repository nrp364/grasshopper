include "../include/assoc_list.spl";

options "-stratify"

procedure lookup(lst: Node, val: Int, implicit ghost C: Set<Int>, implicit ghost D: Map<Int,Int>)
  returns (res: Int)
  requires list_map(lst, null, C, D) &*& val in C
  ensures (res == val.D) &*& list_map(lst, null, C, D)
{
  var curr: Node;
  curr := lst;
  var prev: Node;
  prev := null;
  while (curr.key < val) 
    invariant
      (prev == null && curr == lst || val > prev.key &*& prev.next |-> curr) -** 
      list_map(lst, null, C, D) &*& val in C
  {
    prev := curr;
    curr := curr.next;
  }
  return curr.data;
}

procedure lookupOpt(lst: Node, val: Int, implicit ghost C: Set<Int>, implicit ghost D: Map<Int,Int>)
  returns (res: Int)
  requires list_map(lst, null, C, D)
  ensures list_map(lst, null, C, D)
  ensures (val in C && res == val.D) || (!(val in C) && res == -1)
{
  var curr: Node;
  curr := lst;
  var prev: Node;
  prev := null;
  while (curr != null && curr.key < val) 
    invariant (prev == null && curr == lst || val > prev.key &*& prev.next |-> curr) -** 
      list_map(lst, null, C, D)
  {
    prev := curr;
    curr := curr.next;
  }
  if (curr != null && curr.key == val) return curr.data;
  else return -1;
}

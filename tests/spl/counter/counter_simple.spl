struct Counter {
  ghost var n: Int;
  var c: Cell;
}

struct Cell {
  var data: Int;
}

predicate counter(this: Counter) {
  acc(this) &*& acc(this.c) &*&
  0 <= this.n &*&
  this.n == this.c.data
}
  
procedure NewCounter(initValue: Int)
  returns (this: Counter)
  requires 0 <= initValue
  ensures counter(this)
  ensures this.n == initValue
{
  this := new Counter;
  this.c := new Cell;
  this.n := initValue;
  this.c.data := initValue;
}

procedure test(this: Counter)
  requires counter(this)
{
  assert counter(this);
  assume false;
}

procedure FreeCounter(this: Counter)
  requires counter(this)
{
  free this.c;
  free this;
}

procedure Inc(this: Counter, implicit ghost FP1: Set<Counter>, implicit ghost FP2: Set<Cell>)
  requires counter(this) && (acc(FP1) &*& acc(FP2))
  ensures counter(this) && (acc(FP1) &*& acc(FP2))
  ensures old(this.n) < this.n
{
  this.n := this.n + 1;
  this.c.data := this.c.data + 1;
}

procedure Main() {
  var c := NewCounter(23);
  Inc(c);
  Inc(c);
  pure assert c.n >= 25;
  FreeCounter(c);
}


